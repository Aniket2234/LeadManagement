{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nLeadFlow is a comprehensive Lead Management System built with TypeScript, Express.js, and React. The application provides a modern, interactive dashboard for managing leads through the entire sales pipeline, from initial contact to conversion. It features user authentication, CRUD operations for leads, activity tracking, reminders system, and analytics with interactive charts. The system allows users to efficiently track leads through different stages (New → Contacted → Qualified → Converted → Lost), manage follow-up reminders, and gain insights through detailed reporting and analytics.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React 18** with TypeScript for the user interface\n- **Vite** as the build tool and development server\n- **TanStack Query (React Query)** for server state management and caching\n- **Wouter** for lightweight client-side routing\n- **Zustand** for authentication state management with persistence\n- **Recharts** for interactive data visualizations and charts\n- **shadcn/ui** components built on Radix UI primitives for consistent, accessible UI\n- **Tailwind CSS** for styling with CSS variables for theming\n\n## Backend Architecture\n- **Express.js** with TypeScript for RESTful API server\n- **JWT-based authentication** with bcryptjs for password hashing\n- **Middleware-based request logging** for API monitoring\n- **Custom error handling** middleware for consistent error responses\n- **File-based route registration** for modular API organization\n\n## Data Layer\n- **MongoDB** with **Mongoose** for database operations and schema management\n- **MongoDB Atlas** as the primary database (cloud-hosted MongoDB)\n- **Shared schema definitions** between client and server for type safety\n- **Schema validation** using Mongoose models and Zod validation\n\n## Database Schema (MongoDB Collections)\n- **Users**: Authentication and user management (_id, name, email, password, timestamps)\n- **Leads**: Core lead information (name, contact details, company, source, status, tags, user association)\n- **Notes**: Lead-specific notes with timestamps and references to leads and users\n- **Activities**: Audit trail for lead actions (created, updated, status_changed, note_added)\n- **Reminders**: Follow-up reminders with due dates and completion status\n\n## Authentication & Authorization\n- **JWT tokens** for stateless authentication with 7-day expiration\n- **Password hashing** using bcryptjs with salt rounds\n- **Protected routes** with middleware-based token verification\n- **Persistent auth state** using Zustand with localStorage\n\n## API Design\n- **RESTful endpoints** following standard HTTP methods\n- **Input validation** using Zod schemas shared between client and server\n- **Consistent error responses** with proper HTTP status codes\n- **Query parameters** for filtering, searching, and pagination\n- **Analytics endpoints** for dashboard metrics and reporting\n\n## Real-time Features\n- **Activity logging** for all lead interactions and changes\n- **Reminder system** with date-based filtering for due/overdue items\n- **Live metrics** updated through React Query's automatic refetching\n\n## Development Workflow\n- **Hot module replacement** in development with Vite\n- **TypeScript compilation** with strict type checking\n- **Path aliases** for clean imports (@/, @shared/, @assets/)\n- **Replit-specific plugins** for development environment integration\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **mongoose**: MongoDB object modeling for Node.js with built-in type casting and validation\n- **@tanstack/react-query**: Server state management and caching\n- **express**: Node.js web application framework\n- **jsonwebtoken**: JWT token generation and verification\n- **bcryptjs**: Password hashing and verification\n- **zod**: TypeScript-first schema validation\n\n## UI and Styling\n- **@radix-ui/***: Headless UI primitives for accessible components\n- **tailwindcss**: Utility-first CSS framework\n- **recharts**: Composable charting library for React\n- **lucide-react**: Icon library with React components\n- **class-variance-authority**: Utility for creating component variants\n- **clsx** and **tailwind-merge**: CSS class utilities\n\n## Development Tools\n- **vite**: Frontend build tool and development server\n- **typescript**: Static type checking\n- **@replit/vite-plugin-***: Replit-specific development plugins\n- **esbuild**: Fast JavaScript bundler for production builds\n\n## Database and Storage\n- **MongoDB Atlas**: Cloud-hosted MongoDB database service\n- **Mongoose**: MongoDB object document mapper (ODM) for Node.js\n- **MONGODB_URI**: Connection string stored securely as Replit secret\n- **IP Whitelisting**: MongoDB Atlas requires `0.0.0.0/0` in Network Access for Replit compatibility\n\n## State Management and Routing\n- **zustand**: Lightweight state management\n- **wouter**: Minimalist router for React\n- **@hookform/resolvers**: Form validation resolvers\n- **react-hook-form**: Performant form library","size_bytes":5053},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import mongoose from 'mongoose';\n\nif (!process.env.MONGODB_URI) {\n  throw new Error(\n    \"MONGODB_URI must be set. Did you forget to provision MongoDB?\",\n  );\n}\n\nexport const connectDB = async () => {\n  try {\n    console.log('Connecting to MongoDB...');\n    const conn = await mongoose.connect(process.env.MONGODB_URI!);\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n    return conn;\n  } catch (error) {\n    console.error('Error connecting to MongoDB:', error);\n    process.exit(1);\n  }\n};\n\nexport { mongoose };\n","size_bytes":529},"server/index.ts":{"content":"// index.ts (top of file)\nimport 'dotenv/config'; // <-- immediately loads .env\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { connectDB } from \"./db\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n\n      if (process.env.NODE_ENV === \"development\" && capturedJsonResponse) {\n        const responsePreview = JSON.stringify(capturedJsonResponse);\n        logLine += responsePreview.length > 50\n          ? ` :: ${responsePreview.slice(0, 47)}...`\n          : ` :: ${responsePreview}`;\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Connect to MongoDB (dotenv already loaded)\n  await connectDB();\n  \n  const server = await registerRoutes(app);\n\n  // Global error handler\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    log(`Error ${status}: ${message}`, \"error\");\n    if (process.env.NODE_ENV === \"development\") {\n      log(err.stack || err.toString(), \"error\");\n    }\n\n    res.status(status).json({ message });\n  });\n\n  // Setup Vite in development\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Start server\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({ port, host: \"0.0.0.0\" }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2113},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { authenticateToken, hashPassword, verifyPassword, generateToken } from \"./middleware/auth\";\nimport { \n  insertUserSchema, \n  insertLeadSchema, \n  insertNoteSchema,\n  insertReminderSchema,\n  loginSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { name, email, password } = insertUserSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        name,\n        email,\n        password: hashedPassword\n      });\n\n      const token = generateToken({ userId: user.id, email: user.email });\n      \n      res.json({\n        user: { id: user.id, name: user.name, email: user.email },\n        token\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await verifyPassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = generateToken({ userId: user.id, email: user.email });\n      \n      res.json({\n        user: { id: user.id, name: user.name, email: user.email },\n        token\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user!.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ id: user.id, name: user.name, email: user.email });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Lead routes\n  app.get(\"/api/leads\", authenticateToken, async (req, res) => {\n    try {\n      const {\n        search,\n        status,\n        source,\n        startDate,\n        endDate,\n        page = \"1\",\n        limit = \"10\"\n      } = req.query as Record<string, string>;\n\n      const filters = {\n        search,\n        status,\n        source,\n        startDate: startDate ? new Date(startDate) : undefined,\n        endDate: endDate ? new Date(endDate) : undefined,\n        page: parseInt(page),\n        limit: parseInt(limit)\n      };\n\n      const result = await storage.getLeads(req.user!.userId, filters);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/leads/:id\", authenticateToken, async (req, res) => {\n    try {\n      const lead = await storage.getLeadById(req.params.id, req.user!.userId);\n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.json(lead);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/leads\", authenticateToken, async (req, res) => {\n    try {\n      const leadData = insertLeadSchema.parse({\n        ...req.body,\n        userId: req.user!.userId\n      });\n      \n      const lead = await storage.createLead(leadData);\n      res.status(201).json(lead);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/leads/:id\", authenticateToken, async (req, res) => {\n    try {\n      const leadData = insertLeadSchema.partial().omit({ userId: true }).parse(req.body);\n      const lead = await storage.updateLead(req.params.id, leadData, req.user!.userId);\n      \n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      \n      res.json(lead);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/leads/:id\", authenticateToken, async (req, res) => {\n    try {\n      const success = await storage.deleteLead(req.params.id, req.user!.userId);\n      if (!success) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Notes routes\n  app.post(\"/api/leads/:leadId/notes\", authenticateToken, async (req, res) => {\n    try {\n      // Verify the lead belongs to the current user before allowing note creation\n      const leadExists = await storage.getLeadById(req.params.leadId, req.user!.userId);\n      if (!leadExists) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n\n      const noteData = insertNoteSchema.parse({\n        ...req.body,\n        leadId: req.params.leadId,\n        userId: req.user!.userId\n      });\n      \n      const note = await storage.addNote(noteData);\n      res.status(201).json(note);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/leads/:leadId/notes\", authenticateToken, async (req, res) => {\n    try {\n      const notes = await storage.getLeadNotes(req.params.leadId, req.user!.userId);\n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Reminders routes\n  app.get(\"/api/reminders\", authenticateToken, async (req, res) => {\n    try {\n      const { date, overdue, completed } = req.query as Record<string, string>;\n      \n      const filters = {\n        date: date ? new Date(date) : undefined,\n        overdue: overdue === \"true\",\n        completed: completed !== undefined ? completed === \"true\" : undefined\n      };\n\n      const reminders = await storage.getReminders(req.user!.userId, filters);\n      res.json(reminders);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/reminders\", authenticateToken, async (req, res) => {\n    try {\n      // Verify the lead belongs to the current user if leadId is provided\n      if (req.body.leadId) {\n        const leadExists = await storage.getLeadById(req.body.leadId, req.user!.userId);\n        if (!leadExists) {\n          return res.status(404).json({ message: \"Lead not found\" });\n        }\n      }\n\n      const reminderData = insertReminderSchema.parse({\n        ...req.body,\n        userId: req.user!.userId\n      });\n      \n      const reminder = await storage.createReminder(reminderData);\n      res.status(201).json(reminder);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/reminders/:id\", authenticateToken, async (req, res) => {\n    try {\n      const updates = insertReminderSchema.partial().omit({ userId: true }).parse(req.body);\n      if (req.body.dueDate) {\n        updates.dueDate = new Date(req.body.dueDate);\n      }\n\n      // Verify lead ownership if leadId is being updated\n      if (updates.leadId) {\n        const leadExists = await storage.getLeadById(updates.leadId, req.user!.userId);\n        if (!leadExists) {\n          return res.status(404).json({ message: \"Lead not found\" });\n        }\n      }\n      \n      const reminder = await storage.updateReminder(req.params.id, updates, req.user!.userId);\n      if (!reminder) {\n        return res.status(404).json({ message: \"Reminder not found\" });\n      }\n      \n      res.json(reminder);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/reminders/:id/complete\", authenticateToken, async (req, res) => {\n    try {\n      const success = await storage.completeReminder(req.params.id, req.user!.userId);\n      if (!success) {\n        return res.status(404).json({ message: \"Reminder not found\" });\n      }\n      res.json({ message: \"Reminder completed\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Activity routes\n  app.get(\"/api/activities\", authenticateToken, async (req, res) => {\n    try {\n      const { limit = \"10\" } = req.query as Record<string, string>;\n      const activities = await storage.getRecentActivities(req.user!.userId, parseInt(limit));\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Analytics routes\n  app.get(\"/api/analytics/metrics\", authenticateToken, async (req, res) => {\n    try {\n      const metrics = await storage.getLeadMetrics(req.user!.userId);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/analytics/leads-by-status\", authenticateToken, async (req, res) => {\n    try {\n      const { period } = req.query as Record<string, string>;\n      const data = await storage.getLeadsByStatus(req.user!.userId, period);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/analytics/leads-by-source\", authenticateToken, async (req, res) => {\n    try {\n      const { period } = req.query as Record<string, string>;\n      const data = await storage.getLeadsBySource(req.user!.userId, period);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/analytics/conversion-trend\", authenticateToken, async (req, res) => {\n    try {\n      const { days = \"30\" } = req.query as Record<string, string>;\n      const data = await storage.getConversionTrend(req.user!.userId, parseInt(days));\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/analytics/metrics-trends\", authenticateToken, async (req, res) => {\n    try {\n      const trends = await storage.getMetricsTrends(req.user!.userId);\n      res.json(trends);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/analytics/monthly-metrics\", authenticateToken, async (req, res) => {\n    try {\n      const metrics = await storage.getMonthlyMetrics(req.user!.userId);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Export route\n  app.get(\"/api/leads/export/csv\", authenticateToken, async (req, res) => {\n    try {\n      const { leads } = await storage.getLeads(req.user!.userId, { limit: 10000 });\n      \n      const csvHeaders = \"Name,Email,Phone,Company,Source,Status,Created At\\n\";\n      const csvData = leads.map(lead => \n        `\"${lead.name}\",\"${lead.email || ''}\",\"${lead.phone || ''}\",\"${lead.company || ''}\",\"${lead.source}\",\"${lead.status}\",\"${lead.createdAt.toISOString()}\"`\n      ).join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"leads.csv\"');\n      res.send(csvHeaders + csvData);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12653},"server/storage.ts":{"content":"import mongoose from 'mongoose';\nimport { \n  User, Lead, Note, Activity, Reminder,\n  type IUser, type InsertUser, type ILead, type InsertLead,\n  type INote, type InsertNote, type IActivity, type InsertActivity,\n  type IReminder, type InsertReminder, type LeadWithNotes\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<IUser | undefined>;\n  getUserByEmail(email: string): Promise<IUser | undefined>;\n  createUser(user: InsertUser): Promise<IUser>;\n\n  // Leads\n  getLeads(userId: string, filters?: {\n    search?: string;\n    status?: string;\n    source?: string;\n    startDate?: Date;\n    endDate?: Date;\n    page?: number;\n    limit?: number;\n  }): Promise<{ leads: ILead[]; total: number }>;\n  getLeadById(id: string, userId: string): Promise<LeadWithNotes | undefined>;\n  createLead(lead: InsertLead): Promise<ILead>;\n  updateLead(id: string, lead: Partial<InsertLead>, userId: string): Promise<ILead | undefined>;\n  deleteLead(id: string, userId: string): Promise<boolean>;\n\n  // Notes\n  addNote(note: InsertNote): Promise<INote>;\n  getLeadNotes(leadId: string, userId: string): Promise<INote[]>;\n\n  // Activities\n  addActivity(activity: InsertActivity): Promise<IActivity>;\n  getRecentActivities(userId: string, limit?: number): Promise<IActivity[]>;\n\n  // Reminders\n  createReminder(reminder: InsertReminder): Promise<IReminder>;\n  getReminders(userId: string, filters?: {\n    date?: Date;\n    overdue?: boolean;\n    completed?: boolean;\n  }): Promise<IReminder[]>;\n  updateReminder(id: string, updates: Partial<InsertReminder>, userId: string): Promise<IReminder | undefined>;\n  completeReminder(id: string, userId: string): Promise<boolean>;\n\n  // Analytics\n  getLeadMetrics(userId: string): Promise<{\n    totalLeads: number;\n    newToday: number;\n    convertedThisWeek: number;\n    lostThisMonth: number;\n  }>;\n  getLeadsByStatus(userId: string, period?: string): Promise<{ status: string; count: number }[]>;\n  getLeadsBySource(userId: string, period?: string): Promise<{ source: string; count: number }[]>;\n  getConversionTrend(userId: string, days: number): Promise<{ date: string; count: number }[]>;\n  getMetricsTrends(userId: string): Promise<{\n    totalLeadsTrend: number;\n    newTodayTrend: number;\n    convertedWeekTrend: number;\n    lostMonthTrend: number;\n  }>;\n}\n\nexport class MongoStorage implements IStorage {\n  async getUser(id: string): Promise<IUser | undefined> {\n    const user = await User.findById(id);\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<IUser | undefined> {\n    const user = await User.findOne({ email });\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<IUser> {\n    const user = new User(insertUser);\n    await user.save();\n    return user;\n  }\n\n  async getLeads(userId: string, filters?: {\n    search?: string;\n    status?: string;\n    source?: string;\n    startDate?: Date;\n    endDate?: Date;\n    page?: number;\n    limit?: number;\n  }): Promise<{ leads: ILead[]; total: number }> {\n    const page = filters?.page || 1;\n    const limit = filters?.limit || 10;\n    const skip = (page - 1) * limit;\n\n    const query: any = { userId };\n\n    if (filters?.search) {\n      query.$or = [\n        { name: { $regex: filters.search, $options: 'i' } },\n        { email: { $regex: filters.search, $options: 'i' } },\n        { phone: { $regex: filters.search, $options: 'i' } }\n      ];\n    }\n\n    if (filters?.status) {\n      query.status = filters.status;\n    }\n\n    if (filters?.source) {\n      query.source = filters.source;\n    }\n\n    if (filters?.startDate || filters?.endDate) {\n      query.createdAt = {};\n      if (filters.startDate) {\n        query.createdAt.$gte = filters.startDate;\n      }\n      if (filters.endDate) {\n        query.createdAt.$lte = filters.endDate;\n      }\n    }\n\n    const [leads, total] = await Promise.all([\n      Lead.find(query)\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .exec(),\n      Lead.countDocuments(query)\n    ]);\n\n    // Transform _id to id for frontend compatibility\n    const transformedLeads = leads.map(lead => ({\n      ...lead.toObject(),\n      id: lead._id.toString()\n    })) as any[];\n\n    return { leads: transformedLeads, total };\n  }\n\n  async getLeadById(id: string, userId: string): Promise<LeadWithNotes | undefined> {\n    const lead = await Lead.findOne({ _id: id, userId });\n    if (!lead) return undefined;\n\n    const [notes, activities, reminders] = await Promise.all([\n      Note.find({ leadId: id }).sort({ createdAt: -1 }),\n      Activity.find({ leadId: id }).sort({ createdAt: -1 }),\n      Reminder.find({ leadId: id }).sort({ createdAt: -1 })\n    ]);\n\n    return {\n      ...lead.toObject(),\n      id: lead._id.toString(),\n      notes,\n      activities,\n      reminders\n    } as any;\n  }\n\n  async createLead(lead: InsertLead): Promise<ILead> {\n    const newLead = new Lead({\n      ...lead,\n      statusHistory: [{\n        status: lead.status || 'New',\n        changedAt: new Date(),\n        changedBy: lead.userId\n      }],\n      updatedAt: new Date()\n    });\n    await newLead.save();\n    \n    // Create activity for lead creation\n    await this.addActivity({\n      action: 'created',\n      description: `Created new lead: ${lead.name}`,\n      leadId: newLead._id.toString(),\n      userId: lead.userId,\n      metadata: { source: lead.source, status: lead.status || 'New' }\n    });\n    \n    return {\n      ...newLead.toObject(),\n      id: newLead._id.toString()\n    } as any;\n  }\n\n  async updateLead(id: string, leadUpdates: Partial<InsertLead>, userId: string): Promise<ILead | undefined> {\n    const existingLead = await Lead.findOne({ _id: id, userId });\n    if (!existingLead) return undefined;\n\n    const updates: any = { ...leadUpdates, updatedAt: new Date() };\n    \n    // If status is being updated, add to status history\n    if (leadUpdates.status && leadUpdates.status !== existingLead.status) {\n      updates.$push = {\n        statusHistory: {\n          status: leadUpdates.status,\n          changedAt: new Date(),\n          changedBy: userId\n        }\n      };\n      \n      // Create activity for status change\n      await this.addActivity({\n        action: 'status_changed',\n        description: `Changed status from ${existingLead.status} to ${leadUpdates.status}`,\n        leadId: id,\n        userId: userId,\n        metadata: { \n          oldStatus: existingLead.status, \n          newStatus: leadUpdates.status \n        }\n      });\n    } else {\n      // Create activity for general update\n      await this.addActivity({\n        action: 'updated',\n        description: `Updated lead: ${existingLead.name}`,\n        leadId: id,\n        userId: userId,\n        metadata: leadUpdates\n      });\n    }\n    \n    const lead = await Lead.findOneAndUpdate(\n      { _id: id, userId },\n      updates,\n      { new: true }\n    );\n    \n    if (!lead) return undefined;\n    \n    return {\n      ...lead.toObject(),\n      id: lead._id.toString()\n    } as any;\n  }\n\n  async deleteLead(id: string, userId: string): Promise<boolean> {\n    const result = await Lead.deleteOne({ _id: id, userId });\n    \n    // Also delete related notes, activities, and reminders\n    await Promise.all([\n      Note.deleteMany({ leadId: id }),\n      Activity.deleteMany({ leadId: id }),\n      Reminder.deleteMany({ leadId: id })\n    ]);\n\n    return result.deletedCount > 0;\n  }\n\n  async addNote(note: InsertNote): Promise<INote> {\n    const newNote = new Note(note);\n    await newNote.save();\n    \n    // Create activity for note addition\n    await this.addActivity({\n      action: 'note_added',\n      description: `Added note to lead`,\n      leadId: note.leadId,\n      userId: note.userId,\n      metadata: { noteText: note.text.substring(0, 100) + (note.text.length > 100 ? '...' : '') }\n    });\n    \n    return newNote;\n  }\n\n  async getLeadNotes(leadId: string, userId: string): Promise<INote[]> {\n    const notes = await Note.find({ leadId, userId }).sort({ createdAt: -1 });\n    return notes;\n  }\n\n  async addActivity(activity: InsertActivity): Promise<IActivity> {\n    const newActivity = new Activity(activity);\n    await newActivity.save();\n    return newActivity;\n  }\n\n  async getRecentActivities(userId: string, limit: number = 20): Promise<IActivity[]> {\n    const activities = await Activity.find({ userId })\n      .sort({ createdAt: -1 })\n      .limit(limit)\n      .populate('leadId', 'name');\n    return activities;\n  }\n\n  async createReminder(reminder: InsertReminder): Promise<IReminder> {\n    const newReminder = new Reminder(reminder);\n    await newReminder.save();\n    return newReminder;\n  }\n\n  async getReminders(userId: string, filters?: {\n    date?: Date;\n    overdue?: boolean;\n    completed?: boolean;\n  }): Promise<IReminder[]> {\n    const query: any = { userId };\n\n    if (filters?.completed !== undefined) {\n      query.completed = filters.completed;\n    }\n\n    if (filters?.date) {\n      const startOfDay = new Date(filters.date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(filters.date);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      query.dueDate = {\n        $gte: startOfDay,\n        $lte: endOfDay\n      };\n    }\n\n    if (filters?.overdue) {\n      query.dueDate = { $lt: new Date() };\n      query.completed = false;\n    }\n\n    const reminders = await Reminder.find(query)\n      .sort({ dueDate: 1 })\n      .populate('leadId', 'name');\n    return reminders;\n  }\n\n  async updateReminder(id: string, updates: Partial<InsertReminder>, userId: string): Promise<IReminder | undefined> {\n    const reminder = await Reminder.findOneAndUpdate(\n      { _id: id, userId },\n      updates,\n      { new: true }\n    );\n    return reminder || undefined;\n  }\n\n  async completeReminder(id: string, userId: string): Promise<boolean> {\n    const result = await Reminder.updateOne(\n      { _id: id, userId },\n      { completed: true }\n    );\n    return result.modifiedCount > 0;\n  }\n\n  async getLeadMetrics(userId: string): Promise<{\n    totalLeads: number;\n    newToday: number;\n    convertedThisWeek: number;\n    lostThisMonth: number;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    \n    const startOfWeek = new Date(today);\n    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay()); // Start of current week\n    \n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n\n    const userObjectId = new mongoose.Types.ObjectId(userId);\n    const [totalLeads, newToday, convertedThisWeek, lostThisMonth] = await Promise.all([\n      Lead.countDocuments({ userId: userObjectId }),\n      Lead.countDocuments({ \n        userId: userObjectId, \n        createdAt: { $gte: today, $lt: tomorrow }\n      }),\n      Lead.countDocuments({ \n        userId: userObjectId, \n        status: 'Converted',\n        updatedAt: { $gte: startOfWeek }\n      }),\n      Lead.countDocuments({ \n        userId: userObjectId, \n        status: 'Lost',\n        updatedAt: { $gte: startOfMonth }\n      })\n    ]);\n\n    return {\n      totalLeads,\n      newToday,\n      convertedThisWeek,\n      lostThisMonth\n    };\n  }\n\n  async getLeadsByStatus(userId: string, period?: string): Promise<{ status: string; count: number }[]> {\n    const userObjectId = new mongoose.Types.ObjectId(userId);\n    const dateFilter = this.getPeriodFilter(period);\n    \n    const matchQuery: any = { userId: userObjectId };\n    if (dateFilter) {\n      matchQuery.createdAt = dateFilter;\n    }\n    \n    const results = await Lead.aggregate([\n      { $match: matchQuery },\n      { $group: { _id: '$status', count: { $sum: 1 } } },\n      { $project: { status: '$_id', count: 1, _id: 0 } }\n    ]);\n    \n    return results;\n  }\n\n  async getLeadsBySource(userId: string, period?: string): Promise<{ source: string; count: number }[]> {\n    const userObjectId = new mongoose.Types.ObjectId(userId);\n    const dateFilter = this.getPeriodFilter(period);\n    \n    const matchQuery: any = { userId: userObjectId };\n    if (dateFilter) {\n      matchQuery.createdAt = dateFilter;\n    }\n    \n    const results = await Lead.aggregate([\n      { $match: matchQuery },\n      { $group: { _id: '$source', count: { $sum: 1 } } },\n      { $project: { source: '$_id', count: 1, _id: 0 } }\n    ]);\n    \n    return results;\n  }\n\n  async getConversionTrend(userId: string, days: number): Promise<{ date: string; count: number }[]> {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const results = await Lead.aggregate([\n      {\n        $match: {\n          userId: new mongoose.Types.ObjectId(userId),\n          status: 'Converted',\n          updatedAt: { $gte: startDate }\n        }\n      },\n      {\n        $group: {\n          _id: {\n            $dateToString: {\n              format: '%Y-%m-%d',\n              date: '$updatedAt'\n            }\n          },\n          count: { $sum: 1 }\n        }\n      },\n      {\n        $project: {\n          date: '$_id',\n          count: 1,\n          _id: 0\n        }\n      },\n      { $sort: { date: 1 } }\n    ]);\n\n    return results;\n  }\n\n  async getMetricsTrends(userId: string): Promise<{\n    totalLeadsTrend: number;\n    newTodayTrend: number;\n    convertedWeekTrend: number;\n    lostMonthTrend: number;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    \n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    \n    // Current week vs last week\n    const startOfThisWeek = new Date(today);\n    startOfThisWeek.setDate(startOfThisWeek.getDate() - startOfThisWeek.getDay());\n    \n    const startOfLastWeek = new Date(startOfThisWeek);\n    startOfLastWeek.setDate(startOfLastWeek.getDate() - 7);\n    \n    // Current month vs last month\n    const startOfThisMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n    const startOfLastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    const endOfLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);\n\n    const userObjectId = new mongoose.Types.ObjectId(userId);\n\n    // Calculate current period metrics\n    const [\n      totalLeadsThisMonth,\n      totalLeadsLastMonth,\n      newTodayCurrent,\n      newYesterdayCurrent,\n      convertedThisWeek,\n      convertedLastWeek,\n      lostThisMonth,\n      lostLastMonth,\n    ] = await Promise.all([\n      // Total leads trend: this month vs last month\n      Lead.countDocuments({ \n        userId: userObjectId, \n        createdAt: { $gte: startOfThisMonth }\n      }),\n      Lead.countDocuments({ \n        userId: userObjectId, \n        createdAt: { $gte: startOfLastMonth, $lte: endOfLastMonth }\n      }),\n      // New today vs yesterday\n      Lead.countDocuments({ \n        userId: userObjectId, \n        createdAt: { $gte: today, $lt: tomorrow }\n      }),\n      Lead.countDocuments({ \n        userId: userObjectId, \n        createdAt: { $gte: yesterday, $lt: today }\n      }),\n      // Converted this week vs last week\n      Lead.countDocuments({ \n        userId: userObjectId, \n        status: 'Converted',\n        updatedAt: { $gte: startOfThisWeek }\n      }),\n      Lead.countDocuments({ \n        userId: userObjectId, \n        status: 'Converted',\n        updatedAt: { $gte: startOfLastWeek, $lt: startOfThisWeek }\n      }),\n      // Lost this month vs last month\n      Lead.countDocuments({ \n        userId: userObjectId, \n        status: 'Lost',\n        updatedAt: { $gte: startOfThisMonth }\n      }),\n      Lead.countDocuments({ \n        userId: userObjectId, \n        status: 'Lost',\n        updatedAt: { $gte: startOfLastMonth, $lte: endOfLastMonth }\n      })\n    ]);\n\n    // Calculate percentage trends with proper handling of edge cases\n    const calculateTrend = (current: number, previous: number): number => {\n      if (previous === 0 && current === 0) return 0;\n      if (previous === 0) return 100; // If previous was 0 and current > 0, it's 100% increase\n      if (current === 0) return -100; // If current is 0 and previous > 0, it's 100% decrease\n      return Math.round(((current - previous) / previous) * 100);\n    };\n\n    return {\n      totalLeadsTrend: calculateTrend(totalLeadsThisMonth, totalLeadsLastMonth),\n      newTodayTrend: calculateTrend(newTodayCurrent, newYesterdayCurrent),\n      convertedWeekTrend: calculateTrend(convertedThisWeek, convertedLastWeek),\n      lostMonthTrend: calculateTrend(lostThisMonth, lostLastMonth),\n    };\n  }\n\n  private getPeriodFilter(period?: string) {\n    if (!period) return null;\n    \n    const now = new Date();\n    let startDate: Date;\n    \n    switch (period) {\n      case 'today':\n        startDate = new Date(now);\n        startDate.setHours(0, 0, 0, 0);\n        return { $gte: startDate };\n        \n      case 'week':\n        startDate = new Date(now);\n        startDate.setDate(startDate.getDate() - 7);\n        return { $gte: startDate };\n        \n      case 'month':\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n        return { $gte: startDate };\n        \n      default:\n        return null;\n    }\n  }\n\n  async getMonthlyMetrics(userId: string): Promise<{\n    totalLeadsThisMonth: number;\n    newLeadsThisMonth: number;\n    convertedThisMonth: number;\n    lostThisMonth: number;\n  }> {\n    const startOfThisMonth = new Date();\n    startOfThisMonth.setDate(1);\n    startOfThisMonth.setHours(0, 0, 0, 0);\n    \n    const userObjectId = new mongoose.Types.ObjectId(userId);\n    \n    const [totalLeadsThisMonth, newLeadsThisMonth, convertedThisMonth, lostThisMonth] = await Promise.all([\n      Lead.countDocuments({ userId: userObjectId }),\n      Lead.countDocuments({ \n        userId: userObjectId, \n        createdAt: { $gte: startOfThisMonth }\n      }),\n      Lead.countDocuments({ \n        userId: userObjectId, \n        status: 'Converted',\n        updatedAt: { $gte: startOfThisMonth }\n      }),\n      Lead.countDocuments({ \n        userId: userObjectId, \n        status: 'Lost',\n        updatedAt: { $gte: startOfThisMonth }\n      })\n    ]);\n\n    return {\n      totalLeadsThisMonth,\n      newLeadsThisMonth,\n      convertedThisMonth,\n      lostThisMonth\n    };\n  }\n}\n\nexport const storage = new MongoStorage();","size_bytes":18296},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport { z } from 'zod';\n\n// MongoDB Schema Definitions\nconst userSchema = new Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now },\n});\n\nconst leadSchema = new Schema({\n  name: { type: String, required: true },\n  email: { type: String },\n  phone: { type: String },\n  company: { type: String },\n  source: { \n    type: String, \n    required: true,\n    enum: ['Website', 'Referral', 'Ad', 'Other']\n  },\n  status: { \n    type: String, \n    required: true, \n    default: 'New',\n    enum: ['New', 'Contacted', 'Qualified', 'Converted', 'Lost']\n  },\n  tags: { type: [String], default: [] },\n  statusHistory: [{\n    status: { type: String, required: true },\n    changedAt: { type: Date, default: Date.now },\n    changedBy: { type: Schema.Types.ObjectId, ref: 'User' }\n  }],\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n});\n\nconst noteSchema = new Schema({\n  text: { type: String, required: true },\n  leadId: { type: Schema.Types.ObjectId, ref: 'Lead', required: true },\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  createdAt: { type: Date, default: Date.now },\n});\n\nconst activitySchema = new Schema({\n  action: { \n    type: String, \n    required: true,\n    enum: ['created', 'updated', 'status_changed', 'note_added']\n  },\n  description: { type: String, required: true },\n  leadId: { type: Schema.Types.ObjectId, ref: 'Lead' },\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  metadata: { type: Schema.Types.Mixed },\n  createdAt: { type: Date, default: Date.now },\n});\n\nconst reminderSchema = new Schema({\n  title: { type: String, required: true },\n  message: { type: String, required: true },\n  dueDate: { type: Date, required: true },\n  completed: { type: Boolean, default: false },\n  leadId: { type: Schema.Types.ObjectId, ref: 'Lead', required: true },\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  createdAt: { type: Date, default: Date.now },\n});\n\n// Document Interfaces\nexport interface IUser extends Document {\n  _id: string;\n  name: string;\n  email: string;\n  password: string;\n  createdAt: Date;\n}\n\nexport interface ILead extends Document {\n  _id: string;\n  name: string;\n  email?: string;\n  phone?: string;\n  company?: string;\n  source: 'Website' | 'Referral' | 'Ad' | 'Other';\n  status: 'New' | 'Contacted' | 'Qualified' | 'Converted' | 'Lost';\n  tags: string[];\n  statusHistory: Array<{\n    status: string;\n    changedAt: Date;\n    changedBy?: string;\n  }>;\n  createdAt: Date;\n  updatedAt: Date;\n  userId: string;\n}\n\nexport interface INote extends Document {\n  _id: string;\n  text: string;\n  leadId: string;\n  userId: string;\n  createdAt: Date;\n}\n\nexport interface IActivity extends Document {\n  _id: string;\n  action: 'created' | 'updated' | 'status_changed' | 'note_added';\n  description: string;\n  leadId?: string;\n  userId: string;\n  metadata?: any;\n  createdAt: Date;\n}\n\nexport interface IReminder extends Document {\n  _id: string;\n  title: string;\n  message: string;\n  dueDate: Date;\n  completed: boolean;\n  leadId: string;\n  userId: string;\n  createdAt: Date;\n}\n\n// MongoDB Models\nexport const User = mongoose.model<IUser>('User', userSchema);\nexport const Lead = mongoose.model<ILead>('Lead', leadSchema);\nexport const Note = mongoose.model<INote>('Note', noteSchema);\nexport const Activity = mongoose.model<IActivity>('Activity', activitySchema);\nexport const Reminder = mongoose.model<IReminder>('Reminder', reminderSchema);\n\n// Zod validation schemas\nexport const insertUserSchema = z.object({\n  name: z.string().min(1),\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport const insertLeadSchema = z.object({\n  name: z.string().min(1),\n  email: z.string().email().optional(),\n  phone: z.string().optional(),\n  company: z.string().optional(),\n  source: z.enum(['Website', 'Referral', 'Ad', 'Other']),\n  status: z.enum(['New', 'Contacted', 'Qualified', 'Converted', 'Lost']).default('New'),\n  tags: z.array(z.string()).default([]),\n  userId: z.string(),\n});\n\nexport const insertNoteSchema = z.object({\n  text: z.string().min(1),\n  leadId: z.string(),\n  userId: z.string(),\n});\n\nexport const insertActivitySchema = z.object({\n  action: z.enum(['created', 'updated', 'status_changed', 'note_added']),\n  description: z.string().min(1),\n  leadId: z.string().optional(),\n  userId: z.string(),\n  metadata: z.any().optional(),\n});\n\nexport const insertReminderSchema = z.object({\n  title: z.string().min(1),\n  message: z.string().min(1),\n  dueDate: z.string().transform((val) => new Date(val)),\n  completed: z.boolean().default(false),\n  leadId: z.string(),\n  userId: z.string(),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\n// Type exports for compatibility\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type InsertNote = z.infer<typeof insertNoteSchema>;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\nexport type InsertReminder = z.infer<typeof insertReminderSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\n\nexport type LeadWithNotes = ILead & {\n  notes: INote[];\n  activities: IActivity[];\n  reminders: IReminder[];\n};\n\n// For backward compatibility, create aliases\nexport type User = IUser;\nexport type Lead = ILead;\nexport type Note = INote;\nexport type Activity = IActivity;\nexport type Reminder = IReminder;","size_bytes":5727},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"./lib/auth\";\nimport Login from \"./pages/login\";\nimport Register from \"./pages/register\";\nimport Dashboard from \"./pages/dashboard.tsx\";\nimport Leads from \"./pages/leads.tsx\";\nimport Pipeline from \"./pages/pipeline.tsx\";\nimport Reminders from \"./pages/reminders.tsx\";\nimport Reports from \"./pages/reports.tsx\";\nimport Sidebar from \"./components/layout/sidebar\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const { isAuthenticated } = useAuth();\n  \n  if (!isAuthenticated) {\n    return <Login />;\n  }\n\n  return (\n    <div className=\"h-full flex bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Component />\n      </div>\n    </div>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated } = useAuth();\n  \n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/\" component={() => <ProtectedRoute component={Dashboard} />} />\n      <Route path=\"/leads\" component={() => <ProtectedRoute component={Leads} />} />\n      <Route path=\"/pipeline\" component={() => <ProtectedRoute component={Pipeline} />} />\n      <Route path=\"/reminders\" component={() => <ProtectedRoute component={Reminders} />} />\n      <Route path=\"/reports\" component={() => <ProtectedRoute component={Reports} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1975},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || process.env.SESSION_SECRET || \"fallback-secret\";\n\ninterface JwtPayload {\n  userId: string;\n  email: string;\n}\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: JwtPayload;\n    }\n  }\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10);\n}\n\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\nexport function generateToken(payload: JwtPayload): string {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: \"7d\" });\n}\n\nexport function verifyToken(token: string): JwtPayload {\n  return jwt.verify(token, JWT_SECRET) as JwtPayload;\n}\n\nexport async function authenticateToken(req: Request, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (!token) {\n    return res.status(401).json({ message: \"Access token required\" });\n  }\n\n  try {\n    const decoded = verifyToken(token);\n    const user = await storage.getUser(decoded.userId);\n    \n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n\n    req.user = decoded;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: \"Invalid or expired token\" });\n  }\n}\n","size_bytes":1544},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { getAuthHeaders } from \"./auth\";\n\nexport class ApiError extends Error {\n  constructor(public status: number, message: string) {\n    super(message);\n    this.name = \"ApiError\";\n  }\n}\n\nasync function apiCall(endpoint: string, options: RequestInit = {}) {\n  const response = await fetch(endpoint, {\n    ...options,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...getAuthHeaders(),\n      ...options.headers,\n    },\n  });\n\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ message: \"Request failed\" }));\n    throw new ApiError(response.status, error.message);\n  }\n\n  if (response.status === 204) {\n    return null;\n  }\n\n  return response.json();\n}\n\nexport const api = {\n  // Leads\n  getLeads: (filters?: Record<string, any>) => {\n    const params = new URLSearchParams();\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, String(value));\n        }\n      });\n    }\n    return apiCall(`/api/leads?${params.toString()}`);\n  },\n\n  getLead: (id: string) => apiCall(`/api/leads/${id}`),\n\n  createLead: (leadData: any) =>\n    apiCall(\"/api/leads\", {\n      method: \"POST\",\n      body: JSON.stringify(leadData),\n    }),\n\n  updateLead: (id: string, leadData: any) =>\n    apiCall(`/api/leads/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(leadData),\n    }),\n\n  deleteLead: (id: string) =>\n    apiCall(`/api/leads/${id}`, {\n      method: \"DELETE\",\n    }),\n\n  // Notes\n  addNote: (leadId: string, text: string) =>\n    apiCall(`/api/leads/${leadId}/notes`, {\n      method: \"POST\",\n      body: JSON.stringify({ text }),\n    }),\n\n  getLeadNotes: (leadId: string) => apiCall(`/api/leads/${leadId}/notes`),\n\n  // Reminders\n  getReminders: (filters?: Record<string, any>) => {\n    const params = new URLSearchParams();\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          params.append(key, String(value));\n        }\n      });\n    }\n    return apiCall(`/api/reminders?${params.toString()}`);\n  },\n\n  createReminder: (reminderData: any) =>\n    apiCall(\"/api/reminders\", {\n      method: \"POST\",\n      body: JSON.stringify(reminderData),\n    }),\n\n  updateReminder: (id: string, reminderData: any) =>\n    apiCall(`/api/reminders/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(reminderData),\n    }),\n\n  completeReminder: (id: string) =>\n    apiCall(`/api/reminders/${id}/complete`, {\n      method: \"POST\",\n    }),\n\n  // Activities\n  getActivities: (limit?: number) => {\n    const params = limit ? `?limit=${limit}` : \"\";\n    return apiCall(`/api/activities${params}`);\n  },\n\n  // Analytics\n  getMetrics: () => apiCall(\"/api/analytics/metrics\"),\n  getLeadsByStatus: (period?: string) => {\n    const params = period ? `?period=${period}` : \"\";\n    return apiCall(`/api/analytics/leads-by-status${params}`);\n  },\n  getLeadsBySource: (period?: string) => {\n    const params = period ? `?period=${period}` : \"\";\n    return apiCall(`/api/analytics/leads-by-source${params}`);\n  },\n  getConversionTrend: (days?: number) => {\n    const params = days ? `?days=${days}` : \"\";\n    return apiCall(`/api/analytics/conversion-trend${params}`);\n  },\n  getMetricsTrends: () => apiCall(\"/api/analytics/metrics-trends\"),\n  getMonthlyMetrics: () => apiCall(\"/api/analytics/monthly-metrics\"),\n\n  // Export\n  exportLeadsCSV: async () => {\n    try {\n      const response = await fetch('/api/leads/export/csv', {\n        headers: {\n          ...getAuthHeaders()\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Export failed');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `leads-${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Failed to export CSV:', error);\n      throw error;\n    }\n  },\n};\n","size_bytes":4178},"client/src/lib/auth.ts":{"content":"import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n  setAuth: (user: User, token: string) => void;\n}\n\nexport const useAuth = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n\n      login: async (email: string, password: string) => {\n        const response = await fetch(\"/api/auth/login\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ email, password }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || \"Login failed\");\n        }\n\n        const { user, token } = await response.json();\n        set({ user, token, isAuthenticated: true });\n      },\n\n      register: async (name: string, email: string, password: string) => {\n        const response = await fetch(\"/api/auth/register\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ name, email, password }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.message || \"Registration failed\");\n        }\n\n        const { user, token } = await response.json();\n        set({ user, token, isAuthenticated: true });\n      },\n\n      logout: () => {\n        set({ user: null, token: null, isAuthenticated: false });\n      },\n\n      setAuth: (user: User, token: string) => {\n        set({ user, token, isAuthenticated: true });\n      },\n    }),\n    {\n      name: \"auth-storage\",\n    }\n  )\n);\n\nexport const getAuthHeaders = (): Record<string, string> => {\n  const token = useAuth.getState().token;\n  return token ? { Authorization: `Bearer ${token}` } : {};\n};\n","size_bytes":2171},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Topbar from \"@/components/layout/topbar\";\nimport MetricsCards from \"@/components/dashboard/metrics-cards\";\nimport Charts from \"@/components/dashboard/charts\";\nimport ActivityFeed from \"@/components/dashboard/activity-feed\";\nimport RemindersWidget from \"@/components/dashboard/reminders-widget\";\nimport { Button } from \"@/components/ui/button\";\nimport { api } from \"@/lib/api\";\nimport { Download, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport AddLeadModal from \"@/components/leads/add-lead-modal\";\n\nexport default function Dashboard() {\n  const [addLeadModalOpen, setAddLeadModalOpen] = useState(false);\n  const [statusPeriod, setStatusPeriod] = useState<string>('month');\n  const [sourcePeriod, setSourcePeriod] = useState<string>('month');\n  const [conversionPeriod, setConversionPeriod] = useState<string>('monthly');\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: ['/api/analytics/metrics'],\n    queryFn: api.getMetrics,\n  });\n\n  const { data: statusData = [] } = useQuery({\n    queryKey: ['/api/analytics/leads-by-status', statusPeriod],\n    queryFn: () => api.getLeadsByStatus(statusPeriod),\n  });\n\n  const { data: sourceData = [] } = useQuery({\n    queryKey: ['/api/analytics/leads-by-source', sourcePeriod],\n    queryFn: () => api.getLeadsBySource(sourcePeriod),\n  });\n\n  const { data: conversionData = [] } = useQuery({\n    queryKey: ['/api/analytics/conversion-trend', conversionPeriod],\n    queryFn: () => {\n      const days = conversionPeriod === 'daily' ? 7 : conversionPeriod === 'weekly' ? 30 : 90;\n      return api.getConversionTrend(days);\n    },\n  });\n\n  const { data: trends } = useQuery({\n    queryKey: ['/api/analytics/metrics-trends'],\n    queryFn: api.getMetricsTrends,\n  });\n\n  const { data: activities = [] } = useQuery({\n    queryKey: ['/api/activities'],\n    queryFn: () => api.getActivities(10),\n  });\n\n  const { data: reminders = [] } = useQuery({\n    queryKey: ['/api/reminders'],\n    queryFn: () => api.getReminders({ date: new Date(), completed: false }),\n  });\n\n  const handleExport = () => {\n    api.exportLeadsCSV();\n  };\n\n  if (metricsLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Topbar\n        title=\"Dashboard\"\n        subtitle=\"Welcome back! Here's your lead overview.\"\n        actions={\n          <>\n            <Button variant=\"secondary\" onClick={handleExport} data-testid=\"button-export\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n            <Button onClick={() => setAddLeadModalOpen(true)} data-testid=\"button-add-lead\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Lead\n            </Button>\n          </>\n        }\n      />\n\n      <main className=\"flex-1 overflow-auto p-6\">\n        <div className=\"space-y-6\">\n          {/* Metrics Cards */}\n          {metrics && (\n            <MetricsCards\n              totalLeads={metrics.totalLeads}\n              newToday={metrics.newToday}\n              convertedThisWeek={metrics.convertedThisWeek}\n              lostThisMonth={metrics.lostThisMonth}\n              trends={trends}\n            />\n          )}\n\n          {/* Charts */}\n          <Charts\n            statusData={statusData}\n            sourceData={sourceData}\n            conversionData={conversionData}\n            onStatusPeriodChange={setStatusPeriod}\n            onSourcePeriodChange={setSourcePeriod}\n            onConversionPeriodChange={setConversionPeriod}\n          />\n\n          {/* Activity Feed (takes remaining space in charts grid) */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div className=\"lg:col-span-2\">\n              {/* This space is used by the conversion trend chart above */}\n            </div>\n            <ActivityFeed activities={activities} />\n          </div>\n\n          {/* Today's Reminders Widget */}\n          <RemindersWidget reminders={reminders} />\n        </div>\n      </main>\n\n      <AddLeadModal\n        open={addLeadModalOpen}\n        onOpenChange={setAddLeadModalOpen}\n      />\n    </>\n  );\n}\n","size_bytes":4298},"client/src/pages/leads.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Topbar from \"@/components/layout/topbar\";\nimport AddLeadModal from \"@/components/leads/add-lead-modal\";\nimport LeadDetail from \"@/components/leads/lead-detail\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { Plus, Download, Search, Filter, Eye, Edit, Trash2 } from \"lucide-react\";\n\nexport default function Leads() {\n  const [addLeadModalOpen, setAddLeadModalOpen] = useState(false);\n  const [selectedLeadId, setSelectedLeadId] = useState<string | null>(null);\n  const [leadDetailOpen, setLeadDetailOpen] = useState(false);\n  const [filters, setFilters] = useState({\n    search: \"\",\n    status: \"all\",\n    source: \"all\",\n    page: 1,\n    limit: 10,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: leadsResponse, isLoading } = useQuery({\n    queryKey: ['/api/leads', filters],\n    queryFn: () => api.getLeads({\n      ...filters,\n      status: filters.status === \"all\" ? \"\" : filters.status,\n      source: filters.source === \"all\" ? \"\" : filters.source,\n    }),\n  });\n\n  const deleteLeadMutation = useMutation({\n    mutationFn: (leadId: string) => api.deleteLead(leadId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics/metrics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/activities'] });\n      toast({\n        title: \"Success\",\n        description: \"Lead deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    setFilters({ ...filters, page: 1 });\n  };\n\n  const handleViewLead = (leadId: string) => {\n    setSelectedLeadId(leadId);\n    setLeadDetailOpen(true);\n  };\n\n  const handleDeleteLead = (leadId: string) => {\n    if (confirm(\"Are you sure you want to delete this lead?\")) {\n      deleteLeadMutation.mutate(leadId);\n    }\n  };\n\n  const handleEditLead = (leadId: string) => {\n    setSelectedLeadId(leadId);\n    // You can implement edit functionality here\n    // For now, we'll open the lead detail in edit mode\n    setLeadDetailOpen(true);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"New\": return \"default\";\n      case \"Contacted\": return \"secondary\";\n      case \"Qualified\": return \"outline\";\n      case \"Converted\": return \"default\";\n      case \"Lost\": return \"destructive\";\n      default: return \"default\";\n    }\n  };\n\n  const getSourceColor = (source: string) => {\n    switch (source) {\n      case \"Website\": return \"bg-blue-100 text-blue-800\";\n      case \"Referral\": return \"bg-green-100 text-green-800\";\n      case \"Ad\": return \"bg-orange-100 text-orange-800\";\n      case \"Other\": return \"bg-gray-100 text-gray-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <>\n      <Topbar\n        title=\"Leads Management\"\n        subtitle=\"Manage and track all your leads in one place.\"\n        actions={\n          <>\n            <Button variant=\"secondary\" onClick={() => api.exportLeadsCSV()} data-testid=\"button-export-leads\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n            <Button onClick={() => setAddLeadModalOpen(true)} data-testid=\"button-add-lead\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Lead\n            </Button>\n          </>\n        }\n      />\n\n      <main className=\"flex-1 overflow-auto p-6\">\n        <div className=\"space-y-6\">\n          {/* Search and Filters */}\n          <Card className=\"p-6 shadow-sm border border-border\">\n            <CardContent className=\"p-0\">\n              <div className=\"flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0\">\n                <form onSubmit={handleSearch} className=\"relative flex-1 max-w-md\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search leads by name, email, or phone...\"\n                    value={filters.search}\n                    onChange={(e) => setFilters({ ...filters, search: e.target.value })}\n                    className=\"pl-10\"\n                    data-testid=\"input-search\"\n                  />\n                </form>\n                <div className=\"flex items-center space-x-3\">\n                  <Select value={filters.status} onValueChange={(value) => setFilters({ ...filters, status: value, page: 1 })}>\n                    <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"All Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"New\">New</SelectItem>\n                      <SelectItem value=\"Contacted\">Contacted</SelectItem>\n                      <SelectItem value=\"Qualified\">Qualified</SelectItem>\n                      <SelectItem value=\"Converted\">Converted</SelectItem>\n                      <SelectItem value=\"Lost\">Lost</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Select value={filters.source} onValueChange={(value) => setFilters({ ...filters, source: value, page: 1 })}>\n                    <SelectTrigger className=\"w-32\" data-testid=\"select-source-filter\">\n                      <SelectValue placeholder=\"All Sources\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Sources</SelectItem>\n                      <SelectItem value=\"Website\">Website</SelectItem>\n                      <SelectItem value=\"Referral\">Referral</SelectItem>\n                      <SelectItem value=\"Ad\">Ad</SelectItem>\n                      <SelectItem value=\"Other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button variant=\"outline\" data-testid=\"button-more-filters\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    More Filters\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Leads Table */}\n          <Card className=\"shadow-sm border border-border overflow-hidden\">\n            <CardHeader className=\"px-6 py-4 border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg font-semibold text-foreground\">All Leads</CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground\" data-testid=\"text-leads-count\">\n                    {leadsResponse?.total || 0} leads\n                  </span>\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => api.exportLeadsCSV()}>\n                    <Download className=\"w-4 h-4 mr-1\" />\n                    Export\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <div className=\"overflow-x-auto\">\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-12\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : (\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                        <Checkbox />\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Name</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Company</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Source</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Status</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Created</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-border\">\n                    {leadsResponse?.leads?.map((lead: any) => (\n                      <tr key={lead.id} className=\"hover:bg-muted/50\" data-testid={`row-lead-${lead.id}`}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Checkbox />\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center mr-3\">\n                              <span className=\"text-sm font-medium text-primary-foreground\">\n                                {lead.name.split(\" \").map((n: string) => n[0]).join(\"\").toUpperCase()}\n                              </span>\n                            </div>\n                            <div>\n                              <div className=\"text-sm font-medium text-foreground\">{lead.name}</div>\n                              {lead.email && <div className=\"text-sm text-muted-foreground\">{lead.email}</div>}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          {lead.company || \"-\"}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge className={`text-xs font-medium rounded-full ${getSourceColor(lead.source)}`}>\n                            {lead.source}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge variant={getStatusColor(lead.status)} className=\"text-xs font-medium rounded-full\">\n                            {lead.status}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                          {new Date(lead.createdAt).toLocaleDateString()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => handleViewLead(lead.id)}\n                              data-testid={`button-view-${lead.id}`}\n                            >\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => handleEditLead(lead.id)}\n                              data-testid={`button-edit-${lead.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => handleDeleteLead(lead.id)}\n                              data-testid={`button-delete-${lead.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4 text-destructive\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    )) || []}\n                  </tbody>\n                </table>\n              )}\n            </div>\n            \n            {/* Pagination */}\n            {leadsResponse && (\n              <div className=\"px-6 py-4 border-t border-border\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    Showing {((filters.page - 1) * filters.limit) + 1} to{\" \"}\n                    {Math.min(filters.page * filters.limit, leadsResponse.total)} of {leadsResponse.total} results\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      disabled={filters.page <= 1}\n                      onClick={() => setFilters({ ...filters, page: filters.page - 1 })}\n                      data-testid=\"button-previous\"\n                    >\n                      Previous\n                    </Button>\n                    <span className=\"px-3 py-1 bg-primary text-primary-foreground rounded text-sm\">\n                      {filters.page}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      disabled={filters.page * filters.limit >= leadsResponse.total}\n                      onClick={() => setFilters({ ...filters, page: filters.page + 1 })}\n                      data-testid=\"button-next\"\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </Card>\n        </div>\n      </main>\n\n      <AddLeadModal\n        open={addLeadModalOpen}\n        onOpenChange={setAddLeadModalOpen}\n      />\n\n      <LeadDetail\n        leadId={selectedLeadId}\n        open={leadDetailOpen}\n        onOpenChange={setLeadDetailOpen}\n      />\n    </>\n  );\n}\n","size_bytes":14941},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ChartLine } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await login(email, password);\n      setLocation(\"/\");\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: error instanceof Error ? error.message : \"An error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"max-w-md w-full space-y-8 p-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mb-6\">\n            <ChartLine className=\"text-2xl text-primary-foreground\" size={32} />\n          </div>\n          <h2 className=\"text-3xl font-bold text-foreground\">Welcome to LeadFlow</h2>\n          <p className=\"mt-2 text-muted-foreground\">Sign in to your account to continue</p>\n        </div>\n        \n        <Card className=\"bg-card p-8 shadow-xl border border-border\">\n          <CardContent className=\"p-0\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"email\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  Email\n                </Label>\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"w-full\"\n                  placeholder=\"john@company.com\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  Password\n                </Label>\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  required\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"w-full\"\n                  placeholder=\"••••••••\"\n                  data-testid=\"input-password\"\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                disabled={loading}\n                className=\"w-full\"\n                data-testid=\"button-signin\"\n              >\n                {loading ? \"Signing In...\" : \"Sign In\"}\n              </Button>\n              \n              <div className=\"text-center\">\n                <button\n                  type=\"button\"\n                  onClick={() => setLocation(\"/register\")}\n                  className=\"text-primary hover:text-primary/80 text-sm\"\n                  data-testid=\"link-register\"\n                >\n                  Don't have an account? Sign up\n                </button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3860},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pipeline.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Topbar from \"@/components/layout/topbar\";\nimport AddLeadModal from \"@/components/leads/add-lead-modal\";\nimport LeadDetail from \"@/components/leads/lead-detail\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { Plus, Eye, Edit, Globe, Users, Target } from \"lucide-react\";\n\ninterface Lead {\n  id: string;\n  name: string;\n  email?: string;\n  phone?: string;\n  company?: string;\n  source: \"Website\" | \"Referral\" | \"Ad\" | \"Other\";\n  status: \"New\" | \"Contacted\" | \"Qualified\" | \"Converted\" | \"Lost\";\n  createdAt: string;\n}\n\nexport default function Pipeline() {\n  const [addLeadModalOpen, setAddLeadModalOpen] = useState(false);\n  const [selectedLeadId, setSelectedLeadId] = useState<string | null>(null);\n  const [leadDetailOpen, setLeadDetailOpen] = useState(false);\n  const [timeFilter, setTimeFilter] = useState(\"all\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: leadsResponse, isLoading } = useQuery({\n    queryKey: ['/api/leads', { limit: 1000 }],\n    queryFn: () => api.getLeads({ limit: 1000 }),\n  });\n\n  const updateLeadMutation = useMutation({\n    mutationFn: ({ leadId, status }: { leadId: string; status: string }) => \n      api.updateLead(leadId, { status }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics/metrics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/activities'] });\n      toast({\n        title: \"Success\",\n        description: \"Lead status updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update lead status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleViewLead = (leadId: string) => {\n    setSelectedLeadId(leadId);\n    setLeadDetailOpen(true);\n  };\n\n  const handleStatusChange = (leadId: string, newStatus: string) => {\n    updateLeadMutation.mutate({ leadId, status: newStatus });\n  };\n\n  const getSourceIcon = (source: string) => {\n    switch (source) {\n      case \"Website\": return Globe;\n      case \"Referral\": return Users;\n      case \"Ad\": return Target;\n      default: return Globe;\n    }\n  };\n\n  const getSourceColor = (source: string) => {\n    switch (source) {\n      case \"Website\": return \"bg-blue-100 text-blue-600\";\n      case \"Referral\": return \"bg-green-100 text-green-600\";\n      case \"Ad\": return \"bg-orange-100 text-orange-600\";\n      default: return \"bg-gray-100 text-gray-600\";\n    }\n  };\n\n  const groupLeadsByStatus = (leads: Lead[]) => {\n    const statusGroups = {\n      New: leads.filter(lead => lead.status === \"New\"),\n      Contacted: leads.filter(lead => lead.status === \"Contacted\"),\n      Qualified: leads.filter(lead => lead.status === \"Qualified\"),\n      Converted: leads.filter(lead => lead.status === \"Converted\"),\n      Lost: leads.filter(lead => lead.status === \"Lost\"),\n    };\n    return statusGroups;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"New\": return \"bg-gray-200 text-gray-700\";\n      case \"Contacted\": return \"bg-blue-200 text-blue-700\";\n      case \"Qualified\": return \"bg-purple-200 text-purple-700\";\n      case \"Converted\": return \"bg-green-200 text-green-700\";\n      case \"Lost\": return \"bg-red-200 text-red-700\";\n      default: return \"bg-gray-200 text-gray-700\";\n    }\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays === 1) return \"1 day ago\";\n    if (diffInDays < 7) return `${diffInDays} days ago`;\n    return `${Math.floor(diffInDays / 7)} weeks ago`;\n  };\n\n  const leads = leadsResponse?.leads || [];\n  const groupedLeads = groupLeadsByStatus(leads);\n\n  return (\n    <>\n      <Topbar\n        title=\"Lead Pipeline\"\n        subtitle=\"Visualize and manage your lead progression through the sales pipeline.\"\n        actions={\n          <>\n            <Select value={timeFilter} onValueChange={setTimeFilter}>\n              <SelectTrigger className=\"w-32\" data-testid=\"select-time-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Time</SelectItem>\n                <SelectItem value=\"month\">This Month</SelectItem>\n                <SelectItem value=\"week\">This Week</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button onClick={() => setAddLeadModalOpen(true)} data-testid=\"button-add-lead\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Lead\n            </Button>\n          </>\n        }\n      />\n\n      <main className=\"flex-1 overflow-auto p-6\">\n        <Card className=\"p-6 shadow-sm border border-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between p-0 mb-6\">\n            <CardTitle className=\"text-lg font-semibold text-foreground\">Lead Pipeline</CardTitle>\n            <div className=\"text-sm text-muted-foreground\">\n              {leads.length} total leads\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"p-0\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\" data-testid=\"kanban-board\">\n                {Object.entries(groupedLeads).map(([status, statusLeads]) => (\n                  <div key={status} className=\"bg-muted p-4 rounded-xl\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h4 className=\"font-medium text-foreground\">{status}</h4>\n                      <Badge className={`text-xs rounded-full ${getStatusColor(status)}`}>\n                        {statusLeads.length}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      {statusLeads.map((lead) => {\n                        const SourceIcon = getSourceIcon(lead.source);\n                        \n                        return (\n                          <div\n                            key={lead.id}\n                            className=\"bg-card p-3 rounded-lg border border-border shadow-sm cursor-pointer hover:shadow-md transition-shadow\"\n                            data-testid={`lead-card-${lead.id}`}\n                          >\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h5 className=\"font-medium text-foreground text-sm truncate\">\n                                {lead.name}\n                              </h5>\n                              <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs ${getSourceColor(lead.source)}`}>\n                                <SourceIcon className=\"w-3 h-3\" />\n                              </div>\n                            </div>\n                            \n                            {lead.company && (\n                              <p className=\"text-xs text-muted-foreground mb-1 truncate\">\n                                {lead.company}\n                              </p>\n                            )}\n                            \n                            {lead.email && (\n                              <p className=\"text-xs text-muted-foreground mb-2 truncate\">\n                                {lead.email}\n                              </p>\n                            )}\n                            \n                            <div className=\"flex items-center justify-between mt-3\">\n                              <span className=\"text-xs text-muted-foreground\">\n                                {formatTimeAgo(lead.createdAt)}\n                              </span>\n                              <div className=\"flex space-x-1\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"h-6 w-6\"\n                                  onClick={() => handleViewLead(lead.id)}\n                                  data-testid={`button-view-lead-${lead.id}`}\n                                >\n                                  <Eye className=\"w-3 h-3\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"h-6 w-6\"\n                                  data-testid={`button-edit-lead-${lead.id}`}\n                                >\n                                  <Edit className=\"w-3 h-3\" />\n                                </Button>\n                              </div>\n                            </div>\n                            \n                            {/* Status transition buttons */}\n                            {status !== \"Converted\" && status !== \"Lost\" && (\n                              <div className=\"mt-2 flex space-x-1\">\n                                {status === \"New\" && (\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className=\"text-xs h-6 px-2\"\n                                    onClick={() => handleStatusChange(lead.id, \"Contacted\")}\n                                    disabled={updateLeadMutation.isPending}\n                                    data-testid={`button-contact-${lead.id}`}\n                                  >\n                                    Contact\n                                  </Button>\n                                )}\n                                {status === \"Contacted\" && (\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className=\"text-xs h-6 px-2\"\n                                    onClick={() => handleStatusChange(lead.id, \"Qualified\")}\n                                    disabled={updateLeadMutation.isPending}\n                                    data-testid={`button-qualify-${lead.id}`}\n                                  >\n                                    Qualify\n                                  </Button>\n                                )}\n                                {status === \"Qualified\" && (\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className=\"text-xs h-6 px-2\"\n                                    onClick={() => handleStatusChange(lead.id, \"Converted\")}\n                                    disabled={updateLeadMutation.isPending}\n                                    data-testid={`button-convert-${lead.id}`}\n                                  >\n                                    Convert\n                                  </Button>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                      \n                      {statusLeads.length === 0 && (\n                        <div className=\"text-center py-8 text-muted-foreground text-sm\">\n                          No leads in {status.toLowerCase()}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n\n      <AddLeadModal\n        open={addLeadModalOpen}\n        onOpenChange={setAddLeadModalOpen}\n      />\n\n      <LeadDetail\n        leadId={selectedLeadId}\n        open={leadDetailOpen}\n        onOpenChange={setLeadDetailOpen}\n      />\n    </>\n  );\n}\n","size_bytes":12763},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ChartLine } from \"lucide-react\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const { register } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await register(name, email, password);\n      setLocation(\"/\");\n    } catch (error) {\n      toast({\n        title: \"Registration Failed\",\n        description: error instanceof Error ? error.message : \"An error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"max-w-md w-full space-y-8 p-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mb-6\">\n            <ChartLine className=\"text-2xl text-primary-foreground\" size={32} />\n          </div>\n          <h2 className=\"text-3xl font-bold text-foreground\">Create Account</h2>\n          <p className=\"mt-2 text-muted-foreground\">Join LeadFlow to manage your leads effectively</p>\n        </div>\n        \n        <Card className=\"bg-card p-8 shadow-xl border border-border\">\n          <CardContent className=\"p-0\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"name\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  Full Name\n                </Label>\n                <Input\n                  id=\"name\"\n                  name=\"name\"\n                  type=\"text\"\n                  required\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  className=\"w-full\"\n                  placeholder=\"John Doe\"\n                  data-testid=\"input-name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"regEmail\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  Email\n                </Label>\n                <Input\n                  id=\"regEmail\"\n                  name=\"email\"\n                  type=\"email\"\n                  required\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"w-full\"\n                  placeholder=\"john@company.com\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"regPassword\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  Password\n                </Label>\n                <Input\n                  id=\"regPassword\"\n                  name=\"password\"\n                  type=\"password\"\n                  required\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"w-full\"\n                  placeholder=\"••••••••\"\n                  data-testid=\"input-password\"\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                disabled={loading}\n                className=\"w-full\"\n                data-testid=\"button-create\"\n              >\n                {loading ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n              \n              <div className=\"text-center\">\n                <button\n                  type=\"button\"\n                  onClick={() => setLocation(\"/login\")}\n                  className=\"text-primary hover:text-primary/80 text-sm\"\n                  data-testid=\"link-login\"\n                >\n                  Already have an account? Sign in\n                </button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4525},"client/src/pages/reminders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Topbar from \"@/components/layout/topbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { Plus, Bell, Clock, CheckCircle, X } from \"lucide-react\";\n\ninterface Reminder {\n  id: string;\n  title: string;\n  message: string;\n  dueDate: string;\n  completed: boolean;\n  leadId: string;\n  createdAt: string;\n}\n\nexport default function Reminders() {\n  const [addReminderModalOpen, setAddReminderModalOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"today\");\n  const [formData, setFormData] = useState({\n    title: \"\",\n    message: \"\",\n    dueDate: \"\",\n    leadId: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get reminders based on active tab\n  const getRemindersFilter = () => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    switch (activeTab) {\n      case \"today\":\n        return { date: today, completed: false };\n      case \"tomorrow\":\n        const tomorrow = new Date(today);\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        return { date: tomorrow, completed: false };\n      case \"week\":\n        return { completed: false };\n      case \"overdue\":\n        return { overdue: true, completed: false };\n      default:\n        return { completed: false };\n    }\n  };\n\n  const { data: reminders = [], isLoading } = useQuery({\n    queryKey: ['/api/reminders', activeTab],\n    queryFn: () => api.getReminders(getRemindersFilter()),\n  });\n\n  const { data: leadsResponse } = useQuery({\n    queryKey: ['/api/leads', { limit: 1000 }],\n    queryFn: () => api.getLeads({ limit: 1000 }),\n  });\n\n  const createReminderMutation = useMutation({\n    mutationFn: (reminderData: any) => api.createReminder(reminderData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/reminders'] });\n      toast({\n        title: \"Success\",\n        description: \"Reminder created successfully\",\n      });\n      setAddReminderModalOpen(false);\n      setFormData({ title: \"\", message: \"\", dueDate: \"\", leadId: \"\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create reminder\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const completeReminderMutation = useMutation({\n    mutationFn: (reminderId: string) => api.completeReminder(reminderId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/reminders'] });\n      toast({\n        title: \"Success\",\n        description: \"Reminder completed\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to complete reminder\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title.trim() || !formData.dueDate || !formData.leadId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createReminderMutation.mutate(formData);\n  };\n\n  const handleCompleteReminder = (reminderId: string) => {\n    completeReminderMutation.mutate(reminderId);\n  };\n\n  const getStatus = (reminder: Reminder) => {\n    const dueDate = new Date(reminder.dueDate);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    dueDate.setHours(0, 0, 0, 0);\n    \n    if (dueDate < today) return { label: \"Overdue\", variant: \"destructive\" as const };\n    if (dueDate.getTime() === today.getTime()) return { label: \"Today\", variant: \"secondary\" as const };\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    if (dueDate.getTime() === tomorrow.getTime()) return { label: \"Tomorrow\", variant: \"default\" as const };\n    return { label: \"Upcoming\", variant: \"outline\" as const };\n  };\n\n  const formatDueTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const today = new Date();\n    \n    if (date.toDateString() === today.toDateString()) {\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    }\n    \n    return date.toLocaleDateString();\n  };\n\n  const getOverdueCount = () => {\n    const now = new Date();\n    return reminders.filter(reminder => \n      new Date(reminder.dueDate) < now && !reminder.completed\n    ).length;\n  };\n\n  const leads = leadsResponse?.leads || [];\n\n  return (\n    <>\n      <Topbar\n        title=\"Follow-up Reminders\"\n        subtitle=\"Stay on top of your lead follow-ups and never miss an opportunity.\"\n        actions={\n          <Button onClick={() => setAddReminderModalOpen(true)} data-testid=\"button-add-reminder\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Reminder\n          </Button>\n        }\n      />\n\n      <main className=\"flex-1 overflow-auto p-6\">\n        <Card className=\"p-6 shadow-sm border border-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between p-0 mb-6\">\n            <CardTitle className=\"text-lg font-semibold text-foreground\">Follow-up Reminders</CardTitle>\n            {getOverdueCount() > 0 && (\n              <Badge variant=\"destructive\">\n                {getOverdueCount()} Overdue\n              </Badge>\n            )}\n          </CardHeader>\n          \n          <CardContent className=\"p-0\">\n            {/* Reminder Tabs */}\n            <div className=\"flex space-x-4 mb-6\">\n              {[\n                { key: \"today\", label: \"Today\" },\n                { key: \"tomorrow\", label: \"Tomorrow\" },\n                { key: \"week\", label: \"This Week\" },\n                { key: \"overdue\", label: \"Overdue\" },\n              ].map((tab) => (\n                <Button\n                  key={tab.key}\n                  variant={activeTab === tab.key ? \"default\" : \"ghost\"}\n                  onClick={() => setActiveTab(tab.key)}\n                  data-testid={`tab-${tab.key}`}\n                >\n                  {tab.label}\n                </Button>\n              ))}\n            </div>\n            \n            {/* Reminders List */}\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              </div>\n            ) : reminders.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Bell className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No reminders for {activeTab === \"overdue\" ? \"overdue\" : activeTab}</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {reminders.map((reminder) => {\n                  const status = getStatus(reminder);\n                  const leadName = leads.find(lead => lead.id === reminder.leadId)?.name || \"Unknown Lead\";\n                  \n                  return (\n                    <div\n                      key={reminder.id}\n                      className=\"flex items-center p-4 border border-border rounded-lg\"\n                      data-testid={`reminder-${reminder.id}`}\n                    >\n                      <div className={`w-12 h-12 rounded-full flex items-center justify-center mr-4 ${\n                        status.variant === \"destructive\" \n                          ? \"bg-red-100\" \n                          : status.variant === \"secondary\" \n                          ? \"bg-yellow-100\" \n                          : \"bg-green-100\"\n                      }`}>\n                        <Bell className={`${\n                          status.variant === \"destructive\" \n                            ? \"text-red-600\" \n                            : status.variant === \"secondary\" \n                            ? \"text-yellow-600\" \n                            : \"text-green-600\"\n                        }`} size={20} />\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-foreground\">{reminder.title}</h4>\n                        <p className=\"text-sm text-muted-foreground mb-1\">{reminder.message}</p>\n                        <p className=\"text-sm text-muted-foreground\">Lead: {leadName}</p>\n                        <div className=\"flex items-center mt-2 space-x-4\">\n                          <span className=\"text-xs text-muted-foreground flex items-center\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            Due: {formatDueTime(reminder.dueDate)}\n                          </span>\n                          <Badge variant={status.variant} className=\"text-xs\">\n                            {status.label}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleCompleteReminder(reminder.id)}\n                          disabled={completeReminderMutation.isPending}\n                          data-testid={`button-complete-${reminder.id}`}\n                        >\n                          <CheckCircle className=\"w-4 h-4 mr-1\" />\n                          Complete\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          data-testid={`button-snooze-${reminder.id}`}\n                        >\n                          <Clock className=\"w-4 h-4 mr-1\" />\n                          Snooze\n                        </Button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n\n      {/* Add Reminder Modal */}\n      <Dialog open={addReminderModalOpen} onOpenChange={setAddReminderModalOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center justify-between\">\n              Add New Reminder\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setAddReminderModalOpen(false)}\n                data-testid=\"button-close-reminder-modal\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </DialogTitle>\n          </DialogHeader>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"title\" className=\"text-sm font-medium text-foreground mb-2\">\n                Title *\n              </Label>\n              <Input\n                id=\"title\"\n                type=\"text\"\n                required\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                placeholder=\"Follow up with client\"\n                data-testid=\"input-reminder-title\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"leadId\" className=\"text-sm font-medium text-foreground mb-2\">\n                Lead *\n              </Label>\n              <Select value={formData.leadId} onValueChange={(value) => setFormData({ ...formData, leadId: value })}>\n                <SelectTrigger data-testid=\"select-reminder-lead\">\n                  <SelectValue placeholder=\"Select a lead\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {leads.map((lead) => (\n                    <SelectItem key={lead.id} value={lead.id}>\n                      {lead.name} {lead.company && `- ${lead.company}`}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"dueDate\" className=\"text-sm font-medium text-foreground mb-2\">\n                Due Date & Time *\n              </Label>\n              <Input\n                id=\"dueDate\"\n                type=\"datetime-local\"\n                required\n                value={formData.dueDate}\n                onChange={(e) => setFormData({ ...formData, dueDate: e.target.value })}\n                data-testid=\"input-reminder-due-date\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"message\" className=\"text-sm font-medium text-foreground mb-2\">\n                Message\n              </Label>\n              <Textarea\n                id=\"message\"\n                rows={4}\n                value={formData.message}\n                onChange={(e) => setFormData({ ...formData, message: e.target.value })}\n                placeholder=\"Add details about what needs to be done...\"\n                data-testid=\"textarea-reminder-message\"\n              />\n            </div>\n            \n            <div className=\"flex items-center justify-end space-x-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setAddReminderModalOpen(false)}\n                data-testid=\"button-cancel-reminder\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createReminderMutation.isPending}\n                data-testid=\"button-create-reminder\"\n              >\n                {createReminderMutation.isPending ? \"Creating...\" : \"Create Reminder\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":14401},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Topbar from \"@/components/layout/topbar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { api } from \"@/lib/api\";\nimport { Download, TrendingUp, TrendingDown, Target, Users } from \"lucide-react\";\nimport { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, LineChart, Line, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, Tooltip, Legend } from \"recharts\";\n\nexport default function Reports() {\n  const [timeRange, setTimeRange] = useState(\"30\");\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: ['/api/analytics/metrics'],\n    queryFn: api.getMetrics,\n  });\n\n  const { data: statusData = [] } = useQuery({\n    queryKey: ['/api/analytics/leads-by-status'],\n    queryFn: () => api.getLeadsByStatus(),\n  });\n\n  const { data: sourceData = [] } = useQuery({\n    queryKey: ['/api/analytics/leads-by-source'],\n    queryFn: () => api.getLeadsBySource(),\n  });\n\n  const { data: monthlyMetrics } = useQuery({\n    queryKey: ['/api/analytics/monthly-metrics'],\n    queryFn: api.getMonthlyMetrics,\n  });\n\n  const { data: conversionData = [] } = useQuery({\n    queryKey: ['/api/analytics/conversion-trend', timeRange],\n    queryFn: () => api.getConversionTrend(parseInt(timeRange)),\n  });\n\n  const { data: leadsResponse } = useQuery({\n    queryKey: ['/api/leads', { limit: 1000 }],\n    queryFn: () => api.getLeads({ limit: 1000 }),\n  });\n\n  const handleExport = async () => {\n    try {\n      await api.exportLeadsCSV();\n    } catch (error) {\n      console.error('Export failed:', error);\n    }\n  };\n\n  const handleExportAnalytics = async () => {\n    try {\n      // Create analytics data\n      const analyticsData = {\n        metrics,\n        statusData,\n        sourceData,\n        conversionData,\n        timeRange,\n        generatedAt: new Date().toISOString()\n      };\n      \n      const blob = new Blob([JSON.stringify(analyticsData, null, 2)], { type: 'application/json' });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `analytics-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Analytics export failed:', error);\n    }\n  };\n\n  const handleExportMonthlySummary = async () => {\n    try {\n      // Calculate proper monthly conversion rate\n      const monthlyConversionRate = monthlyMetrics && monthlyMetrics.totalLeadsThisMonth > 0 \n        ? ((monthlyMetrics.convertedThisMonth / monthlyMetrics.totalLeadsThisMonth) * 100).toFixed(1)\n        : '0';\n      \n      // Calculate proper monthly lost rate\n      const monthlyLostRate = monthlyMetrics && monthlyMetrics.totalLeadsThisMonth > 0 \n        ? ((monthlyMetrics.lostThisMonth / monthlyMetrics.totalLeadsThisMonth) * 100).toFixed(1)\n        : '0';\n      \n      const summaryData = {\n        month: new Date().toLocaleString('default', { month: 'long', year: 'numeric' }),\n        totalLeads: monthlyMetrics?.totalLeadsThisMonth || 0,\n        newLeads: monthlyMetrics?.newLeadsThisMonth || 0,\n        convertedLeads: monthlyMetrics?.convertedThisMonth || 0,\n        lostLeads: monthlyMetrics?.lostThisMonth || 0,\n        conversionRate: monthlyConversionRate,\n        lostRate: monthlyLostRate,\n        bestSource: getBestSource(),\n        statusBreakdown: statusData,\n        sourceBreakdown: sourceData,\n        generatedAt: new Date().toISOString()\n      };\n      \n      const csvContent = [\n        'Metric,Value',\n        `Month,${summaryData.month}`,\n        `Total Leads,${summaryData.totalLeads}`,\n        `New Leads This Month,${summaryData.newLeads}`,\n        `Converted This Month,${summaryData.convertedLeads}`,\n        `Lost This Month,${summaryData.lostLeads}`,\n        `Monthly Conversion Rate,${summaryData.conversionRate}%`,\n        `Monthly Lost Rate,${summaryData.lostRate}%`,\n        `Best Source,${summaryData.bestSource}`,\n        '',\n        'Status Breakdown',\n        'Status,Count',\n        ...statusData.map((item: any) => `${item.status},${item.count}`),\n        '',\n        'Source Breakdown',\n        'Source,Count',\n        ...sourceData.map((item: any) => `${item.source},${item.count}`)\n      ].join('\\n');\n      \n      const blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `monthly-summary-${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Monthly summary export failed:', error);\n    }\n  };\n\n  const calculateConversionRate = () => {\n    if (!metrics) return 0;\n    return metrics.totalLeads > 0 ? ((metrics.convertedThisWeek / metrics.totalLeads) * 100).toFixed(1) : 0;\n  };\n\n  const calculateGrowthRate = () => {\n    if (!metrics) return 0;\n    // Calculate growth rate based on new leads this month vs last month\n    const currentMonthLeads = metrics.newToday; // This represents new leads today\n    const growthRate = currentMonthLeads > 0 ? ((currentMonthLeads / Math.max(metrics.totalLeads - currentMonthLeads, 1)) * 100) : 0;\n    return growthRate.toFixed(1);\n  };\n\n  const calculateAvgDaysToConvert = () => {\n    if (!leadsResponse?.leads) return '0';\n    \n    const convertedLeads = leadsResponse.leads.filter((lead: any) => lead.status === 'Converted');\n    if (convertedLeads.length === 0) return '0';\n    \n    const totalDays = convertedLeads.reduce((sum: number, lead: any) => {\n      const created = new Date(lead.createdAt);\n      const updated = new Date(lead.updatedAt);\n      const daysDiff = Math.floor((updated.getTime() - created.getTime()) / (1000 * 60 * 60 * 24));\n      return sum + daysDiff;\n    }, 0);\n    \n    return (totalDays / convertedLeads.length).toFixed(1);\n  };\n\n  const getBestSource = () => {\n    if (sourceData.length === 0) return \"Website\";\n    return sourceData.reduce((prev: any, current: any) => (prev.count > current.count) ? prev : current).source;\n  };\n\n  const getLostRate = () => {\n    if (!metrics) return 0;\n    return metrics.totalLeads > 0 ? ((metrics.lostThisMonth / metrics.totalLeads) * 100).toFixed(1) : 0;\n  };\n\n  // Prepare data for source performance radar chart\n  const sourcePerformanceData = sourceData.map((source: any) => {\n    const maxCount = sourceData.length > 0 ? Math.max(...sourceData.map((s: any) => s.count)) : 1;\n    const sourceLeads = leadsResponse?.leads?.filter((lead: any) => lead.source === source.source) || [];\n    const convertedLeads = sourceLeads.filter((lead: any) => lead.status === 'Converted').length;\n    const qualifiedLeads = sourceLeads.filter((lead: any) => lead.status === 'Qualified' || lead.status === 'Converted').length;\n    \n    // Calculate real performance metrics\n    const volume = Math.min(100, (source.count / maxCount) * 100);\n    const conversion = sourceLeads.length > 0 ? (convertedLeads / sourceLeads.length) * 100 : 0;\n    const quality = sourceLeads.length > 0 ? (qualifiedLeads / sourceLeads.length) * 100 : 0;\n    // Cost effectiveness (inverse of lead count - fewer leads might mean higher cost per lead)\n    const cost = Math.max(0, 100 - volume);\n    // Speed (based on how quickly leads progress - simplified calculation)\n    const speed = quality; // Using quality as a proxy for speed\n    \n    return {\n      source: source.source,\n      volume: Math.round(volume),\n      conversion: Math.round(conversion),\n      quality: Math.round(quality),\n      cost: Math.round(cost),\n      speed: Math.round(speed),\n    };\n  });\n\n  const COLORS = ['#e5e7eb', '#3b82f6', '#8b5cf6', '#10b981', '#ef4444'];\n\n  if (metricsLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Topbar\n        title=\"Reports & Analytics\"\n        subtitle=\"Comprehensive insights and analytics for your lead management.\"\n        actions={\n          <>\n            <Select value={timeRange} onValueChange={setTimeRange}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-time-range\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7\">Last 7 Days</SelectItem>\n                <SelectItem value=\"30\">Last 30 Days</SelectItem>\n                <SelectItem value=\"90\">Last 3 Months</SelectItem>\n                <SelectItem value=\"365\">Last Year</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button onClick={handleExport} data-testid=\"button-export-report\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n          </>\n        }\n      />\n\n      <main className=\"flex-1 overflow-auto p-6\">\n        <div className=\"space-y-6\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card className=\"p-6 border border-border\">\n              <CardHeader className=\"flex flex-row items-center justify-between p-0 mb-4\">\n                <CardTitle className=\"font-semibold text-foreground\">Lead Generation</CardTitle>\n                <TrendingUp className=\"text-blue-600\" size={24} />\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Total Leads</span>\n                    <span className=\"font-medium\" data-testid=\"metric-total-leads\">\n                      {metrics?.totalLeads.toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">New This Month</span>\n                    <span className=\"font-medium text-green-600\">\n                      +{metrics?.newToday || 0}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Growth Rate</span>\n                    <span className=\"font-medium text-green-600\">+{calculateGrowthRate()}%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"p-6 border border-border\">\n              <CardHeader className=\"flex flex-row items-center justify-between p-0 mb-4\">\n                <CardTitle className=\"font-semibold text-foreground\">Conversion</CardTitle>\n                <Target className=\"text-yellow-600\" size={24} />\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Conversion Rate</span>\n                    <span className=\"font-medium\" data-testid=\"metric-conversion-rate\">\n                      {calculateConversionRate()}%\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Converted</span>\n                    <span className=\"font-medium text-green-600\">\n                      {metrics?.convertedThisWeek || 0}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Avg. Days to Convert</span>\n                    <span className=\"font-medium\">{calculateAvgDaysToConvert()}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"p-6 border border-border\">\n              <CardHeader className=\"flex flex-row items-center justify-between p-0 mb-4\">\n                <CardTitle className=\"font-semibold text-foreground\">Performance</CardTitle>\n                <Users className=\"text-purple-600\" size={24} />\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Best Source</span>\n                    <span className=\"font-medium\">{getBestSource()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Active Leads</span>\n                    <span className=\"font-medium text-blue-600\">\n                      {(metrics?.totalLeads || 0) - (metrics?.convertedThisWeek || 0) - (metrics?.lostThisMonth || 0)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Lost Rate</span>\n                    <span className=\"font-medium text-red-600\">{getLostRate()}%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Detailed Charts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Lead Status Distribution */}\n            <Card className=\"border border-border p-6\">\n              <CardHeader className=\"p-0 mb-4\">\n                <CardTitle className=\"font-semibold text-foreground\">Lead Status Distribution</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"h-64\" data-testid=\"chart-status-distribution\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={statusData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={50}\n                        outerRadius={100}\n                        paddingAngle={2}\n                        dataKey=\"count\"\n                        nameKey=\"status\"\n                        label={({ status, count, value }) => `${status}: ${count}`}\n                        labelLine={false}\n                      >\n                        {statusData.map((entry: any, index: number) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip \n                        formatter={(value: any, name: any) => [value, name]}\n                        labelFormatter={(label: any) => `Status: ${label}`}\n                      />\n                      <Legend verticalAlign=\"bottom\" height={36} />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n                <div className=\"mt-4 grid grid-cols-2 gap-2 text-sm\">\n                  {statusData.map((entry: any, index: number) => (\n                    <div key={entry.status} className=\"flex items-center\">\n                      <div \n                        className=\"w-3 h-3 rounded-full mr-2\" \n                        style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                      />\n                      <span className=\"text-muted-foreground\">{entry.status}: {entry.count}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Source Performance */}\n            <Card className=\"border border-border p-6\">\n              <CardHeader className=\"p-0 mb-4\">\n                <CardTitle className=\"font-semibold text-foreground\">Source Performance</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"h-64\" data-testid=\"chart-source-performance\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={sourceData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                      <XAxis \n                        dataKey=\"source\" \n                        tick={{ fontSize: 12 }}\n                        angle={-45}\n                        textAnchor=\"end\"\n                        height={60}\n                      />\n                      <YAxis tick={{ fontSize: 12 }} />\n                      <Tooltip \n                        formatter={(value: any, name: any) => [value, 'Count']}\n                        labelFormatter={(label: any) => `Source: ${label}`}\n                        contentStyle={{\n                          backgroundColor: 'white',\n                          border: '1px solid #ccc',\n                          borderRadius: '8px'\n                        }}\n                      />\n                      <Bar dataKey=\"count\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]} />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Conversion Trend */}\n          <Card className=\"border border-border p-6\">\n            <CardHeader className=\"flex flex-row items-center justify-between p-0 mb-4\">\n              <CardTitle className=\"font-semibold text-foreground\">Conversion Trend</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">\n                  {conversionData.reduce((sum: number, item: any) => sum + item.count, 0)} total conversions\n                </span>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"h-64\" data-testid=\"chart-conversion-trend\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={conversionData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tick={{ fontSize: 12 }}\n                      tickFormatter={(value) => {\n                        const date = new Date(value);\n                        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n                      }}\n                    />\n                    <YAxis tick={{ fontSize: 12 }} />\n                    <Tooltip \n                      formatter={(value: any) => [value, 'Conversions']}\n                      labelFormatter={(label: any) => {\n                        const date = new Date(label);\n                        return date.toLocaleDateString('en-US', { \n                          year: 'numeric', \n                          month: 'long', \n                          day: 'numeric' \n                        });\n                      }}\n                      contentStyle={{\n                        backgroundColor: 'white',\n                        border: '1px solid #ccc',\n                        borderRadius: '8px'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"count\" \n                      stroke=\"#10b981\" \n                      strokeWidth={3}\n                      dot={{ fill: \"#10b981\", strokeWidth: 2, r: 4 }}\n                      activeDot={{ r: 6, stroke: \"#10b981\", strokeWidth: 2 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Source Analysis Radar */}\n          {sourcePerformanceData.length > 0 && (\n            <Card className=\"border border-border p-6\">\n              <CardHeader className=\"p-0 mb-4\">\n                <CardTitle className=\"font-semibold text-foreground\">Source Analysis</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"h-80\" data-testid=\"chart-source-analysis\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <RadarChart data={sourcePerformanceData[0] ? [\n                      { subject: 'Volume', value: sourcePerformanceData[0].volume },\n                      { subject: 'Conversion', value: sourcePerformanceData[0].conversion },\n                      { subject: 'Quality', value: sourcePerformanceData[0].quality },\n                      { subject: 'Cost Efficiency', value: 100 - sourcePerformanceData[0].cost },\n                      { subject: 'Speed', value: sourcePerformanceData[0].speed },\n                    ] : []}>\n                      <PolarGrid />\n                      <PolarAngleAxis dataKey=\"subject\" />\n                      <PolarRadiusAxis angle={90} domain={[0, 100]} />\n                      <Radar\n                        name=\"Performance\"\n                        dataKey=\"value\"\n                        stroke=\"#3b82f6\"\n                        fill=\"#3b82f6\"\n                        fillOpacity={0.2}\n                      />\n                    </RadarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Export Summary */}\n          <Card className=\"border border-border p-6\">\n            <CardHeader className=\"p-0 mb-4\">\n              <CardTitle className=\"font-semibold text-foreground\">Export Options</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Button variant=\"outline\" onClick={handleExport} className=\"justify-start\" data-testid=\"button-export-leads-csv\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Leads as CSV\n                </Button>\n                <Button variant=\"outline\" onClick={handleExportAnalytics} className=\"justify-start\" data-testid=\"button-export-analytics\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Analytics\n                </Button>\n                <Button variant=\"outline\" onClick={handleExportMonthlySummary} className=\"justify-start\" data-testid=\"button-export-summary\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Monthly Summary\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </>\n  );\n}\n","size_bytes":23149},"client/src/components/dashboard/activity-feed.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Edit, Trophy, MessageSquare, Bell } from \"lucide-react\";\n\ninterface Activity {\n  id: string;\n  action: \"created\" | \"updated\" | \"status_changed\" | \"note_added\";\n  description: string;\n  createdAt: string;\n  metadata?: any;\n}\n\ninterface ActivityFeedProps {\n  activities: Activity[];\n}\n\nexport default function ActivityFeed({ activities }: ActivityFeedProps) {\n  const getActivityIcon = (action: string) => {\n    switch (action) {\n      case \"created\":\n        return { icon: Plus, bgColor: \"bg-green-100\", iconColor: \"text-green-600\" };\n      case \"updated\":\n        return { icon: Edit, bgColor: \"bg-blue-100\", iconColor: \"text-blue-600\" };\n      case \"status_changed\":\n        return { icon: Trophy, bgColor: \"bg-yellow-100\", iconColor: \"text-yellow-600\" };\n      case \"note_added\":\n        return { icon: MessageSquare, bgColor: \"bg-purple-100\", iconColor: \"text-purple-600\" };\n      default:\n        return { icon: Bell, bgColor: \"bg-gray-100\", iconColor: \"text-gray-600\" };\n    }\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays} days ago`;\n  };\n\n  if (!activities.length) {\n    return (\n      <Card className=\"p-6 shadow-sm border border-border\">\n        <CardHeader className=\"p-0 mb-6\">\n          <CardTitle className=\"text-lg font-semibold text-foreground\">Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No recent activity to display</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-6 shadow-sm border border-border\">\n      <CardHeader className=\"p-0 mb-6\">\n        <CardTitle className=\"text-lg font-semibold text-foreground\">Recent Activity</CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div className=\"space-y-4\">\n          {activities.map((activity) => {\n            const { icon: Icon, bgColor, iconColor } = getActivityIcon(activity.action);\n            \n            return (\n              <div key={activity.id} className=\"flex items-start space-x-3\" data-testid={`activity-${activity.id}`}>\n                <div className={`w-8 h-8 ${bgColor} rounded-full flex items-center justify-center flex-shrink-0`}>\n                  <Icon className={`${iconColor} text-xs`} size={16} />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm text-foreground\">{activity.description}</p>\n                  <p className=\"text-xs text-muted-foreground\">{formatTimeAgo(activity.createdAt)}</p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <Button\n          variant=\"ghost\"\n          className=\"w-full mt-4 text-center text-primary hover:text-primary/80 text-sm\"\n          data-testid=\"button-view-all-activity\"\n        >\n          View all activity\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3432},"client/src/components/dashboard/charts.tsx":{"content":"import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, LineChart, Line, Tooltip, Legend } from \"recharts\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState } from \"react\";\n\ninterface ChartsProps {\n  statusData: { status: string; count: number }[];\n  sourceData: { source: string; count: number }[];\n  conversionData: { date: string; count: number }[];\n  onStatusPeriodChange?: (period: string) => void;\n  onSourcePeriodChange?: (period: string) => void;\n  onConversionPeriodChange?: (period: string) => void;\n}\n\nconst STATUS_COLORS = {\n  'New': '#64748b',\n  'Contacted': '#0ea5e9', \n  'Qualified': '#7c3aed',\n  'Converted': '#059669',\n  'Lost': '#dc2626'\n};\n\nconst STATUS_GRADIENTS = {\n  'New': 'url(#newGradient)',\n  'Contacted': 'url(#contactedGradient)', \n  'Qualified': 'url(#qualifiedGradient)',\n  'Converted': 'url(#convertedGradient)',\n  'Lost': 'url(#lostGradient)'\n};\n\nconst SOURCE_COLORS = {\n  'Website': '#0ea5e9',\n  'Referral': '#059669',\n  'Ad': '#7c3aed',\n  'Other': '#ea580c'\n};\n\nexport default function Charts({ \n  statusData, \n  sourceData, \n  conversionData, \n  onStatusPeriodChange,\n  onSourcePeriodChange,\n  onConversionPeriodChange\n}: ChartsProps) {\n  const [statusPeriod, setStatusPeriod] = useState(\"month\");\n  const [sourcePeriod, setSourcePeriod] = useState(\"month\");\n  const [conversionPeriod, setConversionPeriod] = useState(\"monthly\");\n\n  const handleStatusPeriodChange = (period: string) => {\n    setStatusPeriod(period);\n    onStatusPeriodChange?.(period);\n  };\n\n  const handleSourcePeriodChange = (period: string) => {\n    setSourcePeriod(period);\n    onSourcePeriodChange?.(period);\n  };\n\n  const handleConversionPeriodChange = (period: string) => {\n    setConversionPeriod(period);\n    onConversionPeriodChange?.(period);\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-background/95 backdrop-blur-sm p-4 border border-border rounded-xl shadow-xl animate-in fade-in-0 zoom-in-95\">\n          <p className=\"text-foreground font-semibold text-base mb-2\">\n            {label || payload[0].payload.status || payload[0].payload.source}\n          </p>\n          <div className=\"flex items-center gap-2\">\n            <div \n              className=\"w-3 h-3 rounded-full\" \n              style={{ backgroundColor: payload[0].color || '#0ea5e9' }}\n            />\n            <p className=\"text-foreground font-medium\">\n              {`${payload[0].name || 'Count'}: ${payload[0].value}`}\n            </p>\n          </div>\n          {payload[0].payload.percentage && (\n            <p className=\"text-muted-foreground text-sm mt-1 ml-5\">\n              {`${payload[0].payload.percentage.toFixed(1)}% of total`}\n            </p>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const EmptyChart = ({ message }: { message: string }) => (\n    <div className=\"h-64 flex items-center justify-center\">\n      <div className=\"text-center space-y-2\">\n        <div className=\"w-16 h-16 mx-auto bg-muted rounded-full flex items-center justify-center\">\n          <div className=\"w-8 h-8 bg-muted-foreground/20 rounded-full\" />\n        </div>\n        <p className=\"text-muted-foreground text-sm\">{message}</p>\n      </div>\n    </div>\n  );\n\n  // Add percentage calculation for status data\n  const statusDataWithPercentage = statusData.map(item => {\n    const total = statusData.reduce((sum, d) => sum + d.count, 0);\n    return {\n      ...item,\n      percentage: total > 0 ? (item.count / total) * 100 : 0\n    };\n  });\n\n  const sourceDataWithPercentage = sourceData.map(item => {\n    const total = sourceData.reduce((sum, d) => sum + d.count, 0);\n    return {\n      ...item,\n      percentage: total > 0 ? (item.count / total) * 100 : 0\n    };\n  });\n\n  return (\n    <>\n      {/* Charts Row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Leads by Status Chart */}\n        <Card className=\"p-6 shadow-sm border border-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between p-0 mb-6\">\n            <CardTitle className=\"text-lg font-semibold text-foreground\">Leads by Status</CardTitle>\n            <Select value={statusPeriod} onValueChange={handleStatusPeriodChange}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"month\">This Month</SelectItem>\n                <SelectItem value=\"week\">This Week</SelectItem>\n                <SelectItem value=\"today\">Today</SelectItem>\n              </SelectContent>\n            </Select>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"h-64\" data-testid=\"chart-status\">\n              {statusDataWithPercentage.length === 0 ? (\n                <EmptyChart message=\"No status data available for this period\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <defs>\n                      <linearGradient id=\"newGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#64748b\" stopOpacity={1}/>\n                        <stop offset=\"100%\" stopColor=\"#475569\" stopOpacity={0.8}/>\n                      </linearGradient>\n                      <linearGradient id=\"contactedGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#0ea5e9\" stopOpacity={1}/>\n                        <stop offset=\"100%\" stopColor=\"#0284c7\" stopOpacity={0.8}/>\n                      </linearGradient>\n                      <linearGradient id=\"qualifiedGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#7c3aed\" stopOpacity={1}/>\n                        <stop offset=\"100%\" stopColor=\"#6d28d9\" stopOpacity={0.8}/>\n                      </linearGradient>\n                      <linearGradient id=\"convertedGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#059669\" stopOpacity={1}/>\n                        <stop offset=\"100%\" stopColor=\"#047857\" stopOpacity={0.8}/>\n                      </linearGradient>\n                      <linearGradient id=\"lostGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#dc2626\" stopOpacity={1}/>\n                        <stop offset=\"100%\" stopColor=\"#b91c1c\" stopOpacity={0.8}/>\n                      </linearGradient>\n                    </defs>\n                    <Pie\n                      data={statusDataWithPercentage}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={55}\n                      outerRadius={105}\n                      paddingAngle={3}\n                      dataKey=\"count\"\n                      label={({ status, percentage }) => percentage > 5 ? `${percentage.toFixed(0)}%` : ''}\n                      labelLine={false}\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {statusDataWithPercentage.map((entry, index) => (\n                        <Cell \n                          key={`status-cell-${index}`} \n                          fill={STATUS_GRADIENTS[entry.status as keyof typeof STATUS_GRADIENTS] || STATUS_GRADIENTS.New}\n                          stroke=\"#ffffff\"\n                          strokeWidth={2}\n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip content={<CustomTooltip />} />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={40}\n                      iconType=\"circle\"\n                      formatter={(value, entry) => (\n                        <span style={{ color: entry.color, fontWeight: 500 }}>{value}</span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Leads by Source Chart */}\n        <Card className=\"p-6 shadow-sm border border-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between p-0 mb-6\">\n            <CardTitle className=\"text-lg font-semibold text-foreground\">Leads by Source</CardTitle>\n            <Select value={sourcePeriod} onValueChange={handleSourcePeriodChange}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"month\">This Month</SelectItem>\n                <SelectItem value=\"week\">This Week</SelectItem>\n                <SelectItem value=\"today\">Today</SelectItem>\n              </SelectContent>\n            </Select>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"h-64\" data-testid=\"chart-source\">\n              {sourceDataWithPercentage.length === 0 ? (\n                <EmptyChart message=\"No source data available for this period\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart \n                    data={sourceDataWithPercentage} \n                    margin={{ top: 25, right: 30, left: 20, bottom: 60 }}\n                  >\n                    <defs>\n                      {Object.entries(SOURCE_COLORS).map(([key, color]) => (\n                        <linearGradient key={key} id={`${key}Gradient`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                          <stop offset=\"0%\" stopColor={color} stopOpacity={1}/>\n                          <stop offset=\"100%\" stopColor={color} stopOpacity={0.6}/>\n                        </linearGradient>\n                      ))}\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke=\"#e2e8f0\" \n                      vertical={false}\n                      opacity={0.6}\n                    />\n                    <XAxis \n                      dataKey=\"source\" \n                      tick={{ fontSize: 12, fill: '#64748b' }}\n                      angle={-45}\n                      textAnchor=\"end\"\n                      height={60}\n                      axisLine={{ stroke: '#e2e8f0' }}\n                      tickLine={{ stroke: '#e2e8f0' }}\n                    />\n                    <YAxis \n                      tick={{ fontSize: 12, fill: '#64748b' }}\n                      axisLine={false}\n                      tickLine={false}\n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Bar \n                      dataKey=\"count\" \n                      radius={[6, 6, 0, 0]}\n                      animationDuration={800}\n                      animationBegin={200}\n                    >\n                      {sourceDataWithPercentage.map((entry, index) => (\n                        <Cell \n                          key={`source-cell-${index}`} \n                          fill={`url(#${entry.source}Gradient)`}\n                          stroke={SOURCE_COLORS[entry.source as keyof typeof SOURCE_COLORS] || '#0ea5e9'}\n                          strokeWidth={1}\n                        />\n                      ))}\n                    </Bar>\n                  </BarChart>\n                </ResponsiveContainer>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Conversion Trend */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card className=\"lg:col-span-2 p-6 shadow-sm border border-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between p-0 mb-6\">\n            <CardTitle className=\"text-lg font-semibold text-foreground\">Conversion Trend</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <button \n                className={`px-3 py-1 text-sm rounded-lg transition-colors ${\n                  conversionPeriod === 'monthly' \n                    ? 'bg-primary text-primary-foreground' \n                    : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                }`}\n                onClick={() => handleConversionPeriodChange('monthly')}\n                data-testid=\"button-monthly\"\n              >\n                Monthly\n              </button>\n              <button \n                className={`px-3 py-1 text-sm rounded-lg transition-colors ${\n                  conversionPeriod === 'weekly' \n                    ? 'bg-primary text-primary-foreground' \n                    : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                }`}\n                onClick={() => handleConversionPeriodChange('weekly')}\n                data-testid=\"button-weekly\"\n              >\n                Weekly\n              </button>\n              <button \n                className={`px-3 py-1 text-sm rounded-lg transition-colors ${\n                  conversionPeriod === 'daily' \n                    ? 'bg-primary text-primary-foreground' \n                    : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                }`}\n                onClick={() => handleConversionPeriodChange('daily')}\n                data-testid=\"button-daily\"\n              >\n                Daily\n              </button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"h-64\" data-testid=\"chart-conversion\">\n              {conversionData.length === 0 ? (\n                <EmptyChart message=\"No conversion data available for this period\" />\n              ) : (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart \n                    data={conversionData} \n                    margin={{ top: 25, right: 30, left: 20, bottom: 25 }}\n                  >\n                    <defs>\n                      <linearGradient id=\"conversionAreaGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#059669\" stopOpacity={0.3}/>\n                        <stop offset=\"100%\" stopColor=\"#059669\" stopOpacity={0.05}/>\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke=\"#e2e8f0\" \n                      vertical={false}\n                      opacity={0.6}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      tick={{ fontSize: 12, fill: '#64748b' }}\n                      axisLine={{ stroke: '#e2e8f0' }}\n                      tickLine={{ stroke: '#e2e8f0' }}\n                      tickFormatter={(value) => {\n                        const date = new Date(value);\n                        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n                      }}\n                    />\n                    <YAxis \n                      tick={{ fontSize: 12, fill: '#64748b' }}\n                      axisLine={false}\n                      tickLine={false}\n                    />\n                    <Tooltip \n                      content={({ active, payload, label }) => {\n                        if (active && payload && payload.length) {\n                          return (\n                            <div className=\"bg-background/95 backdrop-blur-sm p-4 border border-border rounded-xl shadow-xl animate-in fade-in-0 zoom-in-95\">\n                              <p className=\"text-foreground font-semibold text-base mb-2\">\n                                {new Date(label).toLocaleDateString('en-US', { \n                                  year: 'numeric', \n                                  month: 'long', \n                                  day: 'numeric' \n                                })}\n                              </p>\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"w-3 h-3 rounded-full bg-emerald-600\" />\n                                <p className=\"text-foreground font-medium\">\n                                  Conversions: {payload[0].value}\n                                </p>\n                              </div>\n                            </div>\n                          );\n                        }\n                        return null;\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"count\" \n                      stroke=\"#059669\" \n                      strokeWidth={3}\n                      dot={{ \n                        fill: '#059669', \n                        strokeWidth: 3, \n                        r: 5,\n                        stroke: '#ffffff'\n                      }}\n                      activeDot={{ \n                        r: 7, \n                        stroke: '#059669', \n                        strokeWidth: 3,\n                        fill: '#ffffff'\n                      }}\n                      animationDuration={1000}\n                      animationBegin={400}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":17586},"client/src/components/dashboard/metrics-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, Plus, Trophy, X, TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface MetricsCardsProps {\n  totalLeads: number;\n  newToday: number;\n  convertedThisWeek: number;\n  lostThisMonth: number;\n  trends?: {\n    totalLeadsTrend: number;\n    newTodayTrend: number;\n    convertedWeekTrend: number;\n    lostMonthTrend: number;\n  };\n}\n\nexport default function MetricsCards({ \n  totalLeads, \n  newToday, \n  convertedThisWeek, \n  lostThisMonth,\n  trends \n}: MetricsCardsProps) {\n  const metrics = [\n    {\n      title: \"Total Leads\",\n      value: totalLeads,\n      icon: Users,\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      trend: { \n        value: Math.abs(trends?.totalLeadsTrend || 0), \n        direction: (trends?.totalLeadsTrend || 0) >= 0 ? \"up\" : \"down\" \n      }\n    },\n    {\n      title: \"New Today\",\n      value: newToday,\n      icon: Plus,\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      trend: { \n        value: Math.abs(trends?.newTodayTrend || 0), \n        direction: (trends?.newTodayTrend || 0) >= 0 ? \"up\" : \"down\" \n      }\n    },\n    {\n      title: \"Converted This Week\",\n      value: convertedThisWeek,\n      icon: Trophy,\n      bgColor: \"bg-yellow-100\",\n      iconColor: \"text-yellow-600\",\n      trend: { \n        value: Math.abs(trends?.convertedWeekTrend || 0), \n        direction: (trends?.convertedWeekTrend || 0) >= 0 ? \"up\" : \"down\" \n      }\n    },\n    {\n      title: \"Lost This Month\",\n      value: lostThisMonth,\n      icon: X,\n      bgColor: \"bg-red-100\",\n      iconColor: \"text-red-600\",\n      trend: { \n        value: Math.abs(trends?.lostMonthTrend || 0), \n        direction: (trends?.lostMonthTrend || 0) >= 0 ? \"down\" : \"up\" \n      }\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {metrics.map((metric, index) => {\n        const Icon = metric.icon;\n        const TrendIcon = metric.trend.direction === \"up\" ? TrendingUp : TrendingDown;\n        \n        return (\n          <Card key={index} className=\"p-6 shadow-sm border border-border\">\n            <CardContent className=\"p-0\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">{metric.title}</p>\n                  <p className=\"text-3xl font-bold text-foreground\" data-testid={`metric-${metric.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {metric.value.toLocaleString()}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 ${metric.bgColor} rounded-xl flex items-center justify-center`}>\n                  <Icon className={`${metric.iconColor}`} size={24} />\n                </div>\n              </div>\n              <div className=\"mt-4 flex items-center text-sm\">\n                <span className={`${metric.trend.direction === 'up' ? 'text-green-600' : 'text-red-600'} flex items-center`}>\n                  <TrendIcon className=\"w-4 h-4 mr-1\" />\n                  {metric.trend.value}%\n                </span>\n                <span className=\"text-muted-foreground ml-2\">vs last month</span>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3313},"client/src/components/dashboard/reminders-widget.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Reminder {\n  id?: string;\n  _id?: string;\n  title: string;\n  message: string;\n  dueDate: string;\n  completed: boolean;\n}\n\ninterface RemindersWidgetProps {\n  reminders: Reminder[];\n}\n\nexport default function RemindersWidget({ reminders }: RemindersWidgetProps) {\n  const now = new Date();\n  const todayReminders = reminders.filter(reminder => {\n    const dueDate = new Date(reminder.dueDate);\n    return dueDate.toDateString() === now.toDateString() && !reminder.completed;\n  });\n  \n  const overdueReminders = reminders.filter(reminder => {\n    const dueDate = new Date(reminder.dueDate);\n    return dueDate < now && !reminder.completed;\n  });\n\n  const getStatus = (reminder: Reminder) => {\n    const dueDate = new Date(reminder.dueDate);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    dueDate.setHours(0, 0, 0, 0);\n    \n    if (dueDate < today) return { label: \"Overdue\", variant: \"destructive\" as const };\n    if (dueDate.getTime() === today.getTime()) return { label: \"Today\", variant: \"secondary\" as const };\n    return { label: \"Upcoming\", variant: \"default\" as const };\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  return (\n    <Card className=\"p-6 shadow-sm border border-border\">\n      <CardHeader className=\"flex flex-row items-center justify-between p-0 mb-6\">\n        <CardTitle className=\"text-lg font-semibold text-foreground\">Today's Reminders</CardTitle>\n        {overdueReminders.length > 0 && (\n          <Badge variant=\"destructive\">\n            {overdueReminders.length} Overdue\n          </Badge>\n        )}\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        {reminders.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No reminders for today</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {reminders.slice(0, 6).map((reminder) => {\n              const status = getStatus(reminder);\n              \n              return (\n                <div key={reminder.id || reminder._id} className=\"p-4 border border-border rounded-lg\" data-testid={`reminder-${reminder.id || reminder._id}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-foreground line-clamp-1\">\n                      {reminder.title}\n                    </span>\n                    <Badge variant={status.variant} className=\"text-xs\">\n                      {status.label}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\n                    {reminder.message}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Due: {status.label === \"Today\" ? formatTime(reminder.dueDate) : \n                          new Date(reminder.dueDate).toLocaleDateString()}\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3353},"client/src/components/layout/sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/lib/auth\";\nimport { \n  ChartLine, \n  BarChart3, \n  Users, \n  GitBranch, \n  Bell, \n  FileText,\n  LogOut\n} from \"lucide-react\";\n\nexport default function Sidebar() {\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n\n  const navItems = [\n    { path: \"/\", icon: BarChart3, label: \"Dashboard\" },\n    { path: \"/leads\", icon: Users, label: \"Leads\" },\n    { path: \"/pipeline\", icon: GitBranch, label: \"Pipeline\" },\n    { path: \"/reminders\", icon: Bell, label: \"Reminders\" },\n    { path: \"/reports\", icon: FileText, label: \"Reports\" },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/login\");\n  };\n\n  return (\n    <div className=\"w-64 bg-card border-r border-border flex flex-col\">\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-xl flex items-center justify-center\">\n            <ChartLine className=\"text-lg text-primary-foreground\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-foreground\">LeadFlow</h1>\n            <p className=\"text-sm text-muted-foreground\">Lead Management</p>\n          </div>\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          return (\n            <button\n              key={item.path}\n              onClick={() => setLocation(item.path)}\n              className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n                isActive(item.path)\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"hover:bg-accent text-foreground\"\n              }`}\n              data-testid={`nav-${item.label.toLowerCase()}`}\n            >\n              <Icon className=\"w-5 h-5\" />\n              <span>{item.label}</span>\n            </button>\n          );\n        })}\n      </nav>\n      \n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3 p-3 rounded-lg bg-muted mb-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-sm font-medium text-primary-foreground\">\n              {user?.name.split(\" \").map(n => n[0]).join(\"\").toUpperCase()}\n            </span>\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-foreground\">{user?.name}</p>\n            <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\n          </div>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleLogout}\n          className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-4 h-4 mr-2\" />\n          Sign Out\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3263},"client/src/components/layout/topbar.tsx":{"content":"interface TopbarProps {\n  title: string;\n  subtitle: string;\n  actions?: React.ReactNode;\n}\n\nexport default function Topbar({ title, subtitle, actions }: TopbarProps) {\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">{title}</h2>\n          <p className=\"text-muted-foreground\">{subtitle}</p>\n        </div>\n        {actions && (\n          <div className=\"flex items-center space-x-4\">\n            {actions}\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":631},"client/src/components/leads/add-lead-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { X } from \"lucide-react\";\n\ninterface AddLeadModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AddLeadModal({ open, onOpenChange }: AddLeadModalProps) {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    company: \"\",\n    source: \"\",\n    status: \"New\",\n    tags: \"\",\n    note: \"\"\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createLeadMutation = useMutation({\n    mutationFn: (leadData: any) => api.createLead(leadData),\n    onSuccess: async (newLead) => {\n      // Add note if provided\n      if (formData.note.trim()) {\n        await api.addNote(newLead.id, formData.note);\n      }\n      \n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics/metrics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/activities'] });\n      \n      toast({\n        title: \"Success\",\n        description: \"Lead created successfully\",\n      });\n      \n      onOpenChange(false);\n      setFormData({\n        name: \"\",\n        email: \"\",\n        phone: \"\",\n        company: \"\",\n        source: \"\",\n        status: \"New\",\n        tags: \"\",\n        note: \"\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const leadData = {\n      name: formData.name,\n      email: formData.email || null,\n      phone: formData.phone || null,\n      company: formData.company || null,\n      source: formData.source,\n      status: formData.status,\n      tags: formData.tags ? formData.tags.split(\",\").map(tag => tag.trim()).filter(Boolean) : [],\n    };\n\n    createLeadMutation.mutate(leadData);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Add New Lead\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-close-modal\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"name\" className=\"text-sm font-medium text-foreground mb-2\">\n                Name *\n              </Label>\n              <Input\n                id=\"name\"\n                type=\"text\"\n                required\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"John Doe\"\n                data-testid=\"input-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"email\" className=\"text-sm font-medium text-foreground mb-2\">\n                Email\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                placeholder=\"john@company.com\"\n                data-testid=\"input-email\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"phone\" className=\"text-sm font-medium text-foreground mb-2\">\n                Phone\n              </Label>\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                value={formData.phone}\n                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                placeholder=\"+1 (555) 123-4567\"\n                data-testid=\"input-phone\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"company\" className=\"text-sm font-medium text-foreground mb-2\">\n                Company\n              </Label>\n              <Input\n                id=\"company\"\n                type=\"text\"\n                value={formData.company}\n                onChange={(e) => setFormData({ ...formData, company: e.target.value })}\n                placeholder=\"Company Name\"\n                data-testid=\"input-company\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"source\" className=\"text-sm font-medium text-foreground mb-2\">\n                Source *\n              </Label>\n              <Select value={formData.source} onValueChange={(value) => setFormData({ ...formData, source: value })}>\n                <SelectTrigger data-testid=\"select-source\">\n                  <SelectValue placeholder=\"Select Source\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Website\">Website</SelectItem>\n                  <SelectItem value=\"Referral\">Referral</SelectItem>\n                  <SelectItem value=\"Ad\">Ad</SelectItem>\n                  <SelectItem value=\"Other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"status\" className=\"text-sm font-medium text-foreground mb-2\">\n                Status\n              </Label>\n              <Select value={formData.status} onValueChange={(value) => setFormData({ ...formData, status: value })}>\n                <SelectTrigger data-testid=\"select-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"New\">New</SelectItem>\n                  <SelectItem value=\"Contacted\">Contacted</SelectItem>\n                  <SelectItem value=\"Qualified\">Qualified</SelectItem>\n                  <SelectItem value=\"Converted\">Converted</SelectItem>\n                  <SelectItem value=\"Lost\">Lost</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"tags\" className=\"text-sm font-medium text-foreground mb-2\">\n              Tags\n            </Label>\n            <Input\n              id=\"tags\"\n              type=\"text\"\n              value={formData.tags}\n              onChange={(e) => setFormData({ ...formData, tags: e.target.value })}\n              placeholder=\"e.g., enterprise, high-priority, follow-up (comma separated)\"\n              data-testid=\"input-tags\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"note\" className=\"text-sm font-medium text-foreground mb-2\">\n              Initial Note\n            </Label>\n            <Textarea\n              id=\"note\"\n              rows={4}\n              value={formData.note}\n              onChange={(e) => setFormData({ ...formData, note: e.target.value })}\n              placeholder=\"Add any initial notes about this lead...\"\n              data-testid=\"textarea-note\"\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-end space-x-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createLeadMutation.isPending}\n              data-testid=\"button-add-lead\"\n            >\n              {createLeadMutation.isPending ? \"Adding...\" : \"Add Lead\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8794},"client/src/components/leads/lead-detail.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { X, Mail, Phone, Building, Calendar, Tag } from \"lucide-react\";\n\ninterface LeadDetailProps {\n  leadId: string | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function LeadDetail({ leadId, open, onOpenChange }: LeadDetailProps) {\n  const [newNote, setNewNote] = useState(\"\");\n  const [newStatus, setNewStatus] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: lead, isLoading } = useQuery({\n    queryKey: ['/api/leads', leadId],\n    queryFn: () => leadId ? api.getLead(leadId) : null,\n    enabled: !!leadId && open,\n  });\n\n  const addNoteMutation = useMutation({\n    mutationFn: (text: string) => api.addNote(leadId!, text),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leads', leadId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/activities'] });\n      setNewNote(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Note added successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add note\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: (status: string) => api.updateLead(leadId!, { status }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leads', leadId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/analytics/metrics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/activities'] });\n      toast({\n        title: \"Success\",\n        description: \"Status updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddNote = () => {\n    if (newNote.trim()) {\n      addNoteMutation.mutate(newNote);\n    }\n  };\n\n  const handleStatusChange = (status: string) => {\n    setNewStatus(status);\n    updateStatusMutation.mutate(status);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"New\": return \"default\";\n      case \"Contacted\": return \"secondary\";\n      case \"Qualified\": return \"outline\";\n      case \"Converted\": return \"default\";\n      case \"Lost\": return \"destructive\";\n      default: return \"default\";\n    }\n  };\n\n  if (!open || !leadId) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Lead Details\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-close-detail\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        ) : lead ? (\n          <div className=\"space-y-6\">\n            {/* Lead Information */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-xl\">{lead.name}</CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={getStatusColor(lead.status)} data-testid=\"badge-status\">\n                      {lead.status}\n                    </Badge>\n                    <Select value={newStatus || lead.status} onValueChange={handleStatusChange}>\n                      <SelectTrigger className=\"w-32\" data-testid=\"select-status-update\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"New\">New</SelectItem>\n                        <SelectItem value=\"Contacted\">Contacted</SelectItem>\n                        <SelectItem value=\"Qualified\">Qualified</SelectItem>\n                        <SelectItem value=\"Converted\">Converted</SelectItem>\n                        <SelectItem value=\"Lost\">Lost</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {lead.email && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-sm\">{lead.email}</span>\n                    </div>\n                  )}\n                  {lead.phone && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-sm\">{lead.phone}</span>\n                    </div>\n                  )}\n                  {lead.company && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Building className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-sm\">{lead.company}</span>\n                    </div>\n                  )}\n                  <div className=\"flex items-center space-x-2\">\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm\">\n                      Created {new Date(lead.createdAt).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n                \n                {lead.tags && lead.tags.length > 0 && (\n                  <div className=\"mt-4\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <Tag className=\"h-4 w-4 text-muted-foreground\" />\n                      <span className=\"text-sm font-medium\">Tags</span>\n                    </div>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {lead.tags.map((tag, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Add Note Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Add Note</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <Textarea\n                    placeholder=\"Add a note about this lead...\"\n                    value={newNote}\n                    onChange={(e) => setNewNote(e.target.value)}\n                    rows={3}\n                    data-testid=\"textarea-new-note\"\n                  />\n                  <Button\n                    onClick={handleAddNote}\n                    disabled={!newNote.trim() || addNoteMutation.isPending}\n                    data-testid=\"button-add-note\"\n                  >\n                    {addNoteMutation.isPending ? \"Adding...\" : \"Add Note\"}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Notes & Activities */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Notes */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Notes</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {lead.notes && lead.notes.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {lead.notes.map((note) => (\n                        <div key={note.id} className=\"p-3 bg-muted rounded-lg\" data-testid={`note-${note.id}`}>\n                          <p className=\"text-sm text-foreground mb-2\">{note.text}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(note.createdAt).toLocaleString()}\n                          </p>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-muted-foreground text-sm\">No notes yet</p>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Activities */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Activities</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {lead.activities && lead.activities.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {lead.activities.map((activity) => (\n                        <div key={activity.id} className=\"p-3 bg-muted rounded-lg\" data-testid={`activity-${activity.id}`}>\n                          <p className=\"text-sm text-foreground mb-2\">{activity.description}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(activity.createdAt).toLocaleString()}\n                          </p>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-muted-foreground text-sm\">No activities yet</p>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Lead not found</p>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10642},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"start.sh":{"content":"#!/bin/bash\n\n# Check if .env file exists and source it\nif [ -f .env ]; then\n    echo \"Loading environment variables from .env file...\"\n    export $(cat .env | sed 's/#.*//g' | xargs)\nfi\n\n# Check if MONGODB_URI is set\nif [ -z \"$MONGODB_URI\" ]; then\n    echo \"ERROR: MONGODB_URI environment variable is not set!\"\n    echo \"Please create a .env file with your MongoDB connection string.\"\n    echo \"See .env.example for the required format.\"\n    exit 1\nfi\n\nnpm run dev","size_bytes":464}},"version":1}